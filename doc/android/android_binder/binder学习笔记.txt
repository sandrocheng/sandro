1 android binder是什么
	跨进程（IPC）机制
	从OpenBinder演化进来
	从Android应用层角度来说，binder是客户端和服务端进行通信的媒介
	
	Android Binder机制大部分都是使用的IPC，进程间通信机制有很多种，例如linux中可以采用管道，消息队列，信号，共享内存，socket等，这些都可以实现进程间的通信。
	
	如图：binder学习笔记_1_android  CS通信机制。Android Binder机制通信是基于Service与Client的，有一个ServiceManager的守护进程管理着系统的各个服务，它负责监听是否有其他程序向其发送请求。
	如果有请求就响应。每个服务都要在ServiceManager中注册，而请求服务的客户端去ServiceManager请求服务。
	
	binder的通信操作类似线程迁移（thread migration），binder的用户空间为每一个进程维护着一个可用的线程池, 用来处理到来的IPC以及执行本地消息。
	两个进程间通信就好像是一个进程进入另一个进程执行代码然后带着执行的结果返回，Android和驱动程序通信采用linux的ioctl机制。

2、IPC原理
	IPC原理，如图：binder学习笔记_2_IPC原理
	
	ioctl是什么：
		ioctl是设备驱动程序中对设备的I/O通道进行管理的函数。
		所谓对I/O通道进行管理，就是对设备的一些特性进行控制，例如串口的传输波特率、 马达的转速等等。
		它的调用函数如下：int ioctl(int fd, ind cmd, …)；
		其中fd就是用户程序打开设备时使用open函数返回的文件标示符，cmd就是用户程序对设备的控制命令，至于后面的省略号。 那是一些补充参数，一般最多一个，有或没有是和cmd的意义相关的。
		ioctl函数是文件结构中的一个属性分量。就是说如果你的驱动程序提供了对ioctl的支持，用户就可以在用户程序中使用ioctl函数控制设备的I/O通道。
	
	ioctl的必要性 
		如果不用ioctl的话，也可以实现对设备I/O通道的控制，但那就太复杂了。
		例如，我们可以在驱动程序中实现write的时候检查一下是否有特殊约定的数据流通过。如果有的话，那么后面就跟着控制命令（一般在socket编程中常常这样做）。
		但是如果这样做的话，会导致代码分工不明，程序结构混乱。 

		程序员自己也会头昏眼花的。所以，我们就使用ioctl来实现控制的功能。
		要记住，用户程序所作的只是通过命令码告诉驱动程序它想做什么，至于怎么解释这些命令和怎么实现这些命令，这都是驱动程序要做的事情。
		
		Android Binder机制如何实现在驱动程序中实现的ioctl函数体内，实际上是有一个switch{case}结构，每一个case对应一个命令码，做出一些相应的操作。
		怎么实现这些操作，这是每一个程序员自己的事情，因为设备都是特定的。关键在于怎么样组织命令码，因为在ioctl中命令码是唯一联系用户程序命令和驱动程序支持的途径。
		命令码的组织是有一些讲究的。 因为我们一定要做到命令和设备是一一对应的，这样才不会将正确的命令发给错误的设备，或者是把错误的命令发给正确的设备。或者是把错误的命令发给错误的设备。
		这些错误都会导致不可预料的事情发生，而当程序员发现了这些奇怪的事情的时候，再来调试程序查找错误，那将是非常困难的事情。

3、binder机制的关键概念
	binder通信模型，如图：binder学习笔记_3_binder通信模型
	
	binder实体对象，binder引用对象，binder代理对象，IBinder对象之间的关系如图：binder学习笔记_3_binder对象和关系

	binder的通信过程
		-注册过程，如图：binder学习笔记_3_注册过程
		-获取服务，如图：binder学习笔记_3_获取服务
		-使用服务，如图：binder学习笔记_3_使用服务

