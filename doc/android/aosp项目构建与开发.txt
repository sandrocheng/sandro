1、Android.mk的使用 
	
	大部分项目下还是会用Android.mk编译文件，它是当前android项目的编译入口文件。
	Android.mk是Android提供的一种makefile文件，用来指定诸如编译生成so库名、引用的头文件目录、需要编译的.c/.cpp文件和.a静态库文件等。要掌握jni，就必须熟练掌握Android.mk的语法规范。
	
	1.1）文件结构
		这些mk文件的基本结构如下：
			1）LOCAL_PATH:= $(call my-dir) #定义一个当前目录的值
			   每个Android.mk文件必须以定义LOCAL_PATH为开始。它用于在开发tree中查找源文件。宏my-dir 则由Build System提供。返回包含Android.mk的目录路径。
			  通过 find ./ -name "*.mk" | xargs grep "my-dir" --color=auto
			  找到./build/make/core/definitions.mk:define my-dir
			  这里根据注释，大概能了解这个函数是定位当前目录的
        		2) include $(CLEAR_VARS)
		           CLEAR_VARS 变量由Build System提供。并指向一个指定的GNU Makefile，由它负责清理很多LOCAL_xxx.
		           通过 find ./ -name "*.mk" | xargs grep "CLEAR_VARS" --color=auto
			  	定位到CLEAR_VARS定义的位值 ./build/make/core/config.mk:CLEAR_VARS :=$= $(BUILD_SYSTEM)/clear_vars.mk
			   通过 find ./ -name "*.mk" | xargs grep "BUILD_SYSTEM" --color=auto
 				定位到 BUILD_SYSTEM := $(TOPDIR)build/make/core	
		           所以CLEAR_VARS定义在 build/make/core/clear_vars.mk，在这个文件里可以看到，它将一些编译用到的变量全部清空了
			4) 各lOCAL_XXX，变量定义，通过这部分变量的定制，可以丰富编译的手段
			5）定义构建方法,指定构建目标是apk,可执行程序，还是jar包
				a) include $(BUILD_PACKAGE) 构建apk包
					通过 find ./ -name "*.mk" | xargs grep "BUILD_PACKAGE" --color=auto 
			 	   查找到 ./build/make/core/config.mk:BUILD_PACKAGE :=$= $(BUILD_SYSTEM)/package.mk
					通过 find ./ -name "package.mk"
				   查找到./build/make/core/package.mk
				   根据文件表述，这个mk是用来构建apk包

				b) include $(BUILD_EXECUTABLE),构建可执行程序
   
                		c) include $(BUILD_STATIC_JAVA_LIBRARY) ,构建jar包
	
			6）清空变量，调用子mk
	
	1.2）通过Android.mk编译jar包    
		源码位值：project/aospSandro/ ,将这个工程下的aosp_lib源码文件，拷贝到package/apps中，只保留java文件 Android.mk 和 proguard.flags文件,重新命名为：AospSandroJavaLib
		AospSandroJavaLib.mk,内容如下：
			LOCAL_PATH:= $(call my-dir) 
			include $(CLEAR_VARS)
			
			#模块名称（其他模块使用，比如说jar包，so库之类的）
			LOCAL_MODULE := aosp-sandro-java-lib
	
			#什么版本下编译，选项有user/debug/test/optional
			#optional,在任何版本下都编译		
			LOCAL_MODULE_TAGS := optional
			
			#混淆规则文件，如果不想混淆，可以使用变量LOCAL_PROGUARD_ENABLED := disable
			LOCAL_PROGUARD_FLAG_FILES := proguard.flags
	
			#源码地址
			LOCAL_SRC_FILES := $(call all-java-files-under,src)
			include $(BUILD_STATIC_JAVA_LIBRARY)
										
		配置好后，在项目根目录下执行mm，编译成功后，jar包会输出到 /out/target/common/obj/JAVA_LIBRARIES/aosp-sandro-java-lib_intermediates目录中
						
	1.3) 通过Android.mk编译apk包
		在package/apps中新建一个项目目录，比如命名位AospSandroLogDemo,
		源码位值：project/aospSandro/ ,将这个工程下的app源码文件，package/apps/AospSandroLogDemo中，只保留android源文件 Android.mk 和 proguard.flags文件
		把Android.mk文件和proguard.flags移到上一层目录中
		目录结构：
			package/apps/aosp_LogDemo/
						 src/
						 proguard.flags	
						 Android.mk	
		Android.mk:
			LOCAL_PATH:= $(call my-dir)/app
			include $(CLEAR_VARS)

			#编译出来的名称(apk使用)
			LOCAL_PACKAGE_NAME := AospLogDemo
			#依赖的jar静态包
			LOCAL_STATIC_JAVA_LIBRARIES := aosp-sandro-java-lib 

			#什么版本下编译，选项有user/debug/test/optional
			#optional,在任何版本下都编译
			LOCAL_MODULE_TAGS := optional

			#混淆规则文件，如果不想混淆，可以使用变量LOCAL_PROGUARD_ENABLED := disable
			LOCAL_PROGUARD_FLAG_FILES := proguard.flags

			#源码地址
			LOCAL_SRC_FILES := $(call all-java-files-under,src)

			#资源文件
			LOCAL_RESOURCE_DIR := $(LOCAL_PATH)/src/main/res

			#清单文件
			LOCAL_MANIFEST_FILE := src/main/AndroidManifest.xml
	
			#android12 通过设置这个变量，通只系统忽略隐藏的类，否则编译会失败
			LOCAL_PRIVATE_PLATFORM_APIS := true

			include $(BUILD_PACKAGE)
    		编译成功后 apk 会保存到 out/target/product/emulator_x86_64/system/app/AospLogDemo/AospLogDemo.apk 位置中。
		注意此时只是编译成功，模拟器启动后，不会默认安装，老版本这么编译会直接默认安装到系统app中。通过make snod 命令刷新system.img。重启模拟器就直接安装了。
		
	1.4) BUILD_JAVA_LIBRARY和BUILD_STATIC_JAVA_LIBRARY的区别
		BUILD_JAVA_LIBRARY,编译出来的是动态库（共享库），共享库不会编译到自己的apk里，加载的时候会动态加载。
				   编译好的jar包会保存到，/out/target/common/obj/JAVA_LIBRARIES/ 和 /out/target/product/emulator_x86_64/system/framework目录下
		BUILD_STATIC_JAVA_LIBRARY，编译出来的是静态库，会编译到自己的apk里。		

	    jar包以静态库的方式编译，include $(BUILD_STATIC_JAVA_LIBRARY)  ，依赖的时候必须使用静态库依赖，LOCAL_STATIC_JAVA_LIBRARIES := aosp-sandro-java-lib
            jar包以共享库的方式编译，include $(BUILD_JAVA_LIBRARY)  ，依赖的时候必须使用静态库依赖，LOCAL_JAVA_LIBRARIES := aosp-sandro-java-lib

	1.5) mk文件里 := 与 += 的使用方法
		a) := ,变量赋值
			LOCAL_XXX := \
				var1 \
				var2 \
				var3
			也可以写成 LOCAL_XXX := var1 var2 var3
		b)+= 变量内容追加
	          比如
			LOCAL_XXX := var1 #先赋值 
			LOCAL_XXX += var2 #后面追加 
			LOCAL_XXX += var3 	

	1.6) mk输出函数
		$(warning 输出内容)，打印输出内容
		$(error 输出内容)，打印输出内容，并终止编译
		例如：
			$(warning $(LOCAL_XXX)),输出 LOCAL_XXX的内容
	
2、android源码查看
	2.1）java 部分一般使用android stuido就可以看
	     实际上Android的源码中已经专门存在了文档来告诉我们如何使用IDE来编辑Android源码,位置是源码路径/development/tools/idegen/README 
	     因为我们现在都使用AndroidStudio了,所以只需要关心其中的IntelliJ部分就好了,Eclipse就不用看了

	     androidStudio的初期配置:
	     文档上说,由于Android太大了,所以我们需要给IDE更多的内存:
             在Help > Edit Custom VM 中添加:
			-Xms1024m
			-Xmx5120m
	     
             然后是AndroidStudio的类大小配置,在Help -> Edit custom properties中添加:
		idea.max.intellisense.filesize=100000
	     这个参数是定义AS默认的类大小的,默认值是2500,会导致太大的Java文件不能被识别,把这个数调大了之后,就可以导入更大的Java文件	
	     
             源码导入:
	     	-使用 envsetup.sh 脚本初始化环境：source build/envsetup.sh
		-lunch [目标名称] : lunch aosp_flame-userdebug
		-编译生成idegen.jar:mmm development/tools/idegen,
		 这里需要注意的是,虽然google的脚本说支持zsh,但是如果你用zsh就会出现Couldn't locate the directory development/tools/idegen 这个错误,使用bash再来一遍就可以了
		-生成完idegen.jar之后,就可以使用命令来扫描生成ipr文件了:sudo ./development/tools/idegen/idegen.sh
		-AndroidStudio的其他配置
		 project setting(File中的Project Structure) -> 
			project: 设置AndroidAPI 31(因为下载的源码是android12),java版本为Java8
			SDK:仅仅保留Java1.8和Android API 28,剩下的都删除掉,如图：aosp项目构建与开发_3_SDK设置
			Modules:将所有的Jar删除,因为基本上我们用不到jar,看源码就够了,如果确实需要哪个的话,再酌情保留,如图：aosp项目构建与开发_3_modules设置
		 

	2.2) C/C++代码查看
	    -使用AS查看android的c代码，没有索引，查阅起来并不是很方便，常规的方法是使用官方生成的Clion CMakelist文件 
	     源码编译前需要设置SOONG_GEN_CMAKEFILES=1和SOONG_GEN_CMAKEFILES_DEBUG=1，编译成功后会在/out/development/ide/目录下，生成clion文件夹这里是各个项目下的CMakeLists.txt文件

	    -clion安装：https://www.jetbrains.com/clion/download/download-thanks.html?platform=windows
	               默认有30天免费期，过期需要密钥激活

	    -MinGW安装：
			-全称为 Minimalist GNU for Windows，它实际上是将经典的开源 C 语言编译器 GCC 移植到了 Windows 平台下，并且包含了 Win32 API ，
	                 因此可以将源代码编译为可在 Windows 中运行的可执行程序。而且还可以使用一些 Windows 平台不具备的，但是 Linux 平台具备的开发工具和 API 函数，即MinGW 就是 GCC 的 Windows 版本
			-MinGW-w64 原本是 MinGW 项目的分支，后来成为独立发展得项目
			-MinGW 只能编译生成 32 位可执行程序，而 MinGW-w64 则可以编译生成 64 位或 32 位可执行程序。
			-下载地址 https://sourceforge.net/projects/mingw-w64/files/
			 选择 x86_64-posix-sjlj 版本下载。
                         posix 或 win32 ：posix（Portable Operating System Interface，可移植操作系统接口），是 UNIX 系统的一个 API设计标准，很多类 UNIX 系统也在支持兼容这个标准，
					  如 Linux 操作系统。posix: 启用了C++ 11 多线程特性，win32: 未启用
			 x86_64或i686：x86_64简称X64，64位操作系统；i686: 32位操作系统 (i386的子集)，差不多奔腾2(1997年5月)之后的CPU都是可以用的
			 DWARF：一种带调试信息(DWARF- 2（DW2）EH)的包, 所以比一般的包尺寸大，仅支持32位系统
			 SJLJ：跨平台，支持32，64位系统，缺点是：运行速度稍慢
			 SEH: 调用系统机制处理异常，支持32，64位系统，缺点是：GCC不支持（即将支持）
			 DWARF DWARF- 2（DW2）EH ，这需要使用DWARF-2（或DWARF-3）调试信息。 DW-2 EH可以导致可执行文件略显膨胀，因为大的调用堆栈解开表必须包含在可执行文件中。
			 setjmp / longjmp（SJLJ）。基于SJLJ的EH比DW2 EH慢得多（在没有异常时会惩罚甚至正常执行），但是可以在没有使用GCC编译的代码或没有调用堆栈的代码上工作。
			 结构化异常处理（SEH） （Structured Exception Handling）Windows使用自己的异常处理机制。	
            		-解压到目录下即可使用，\mingw64\bin  目录下有gcc命令，可以在该目录下运行命令：./g++ -v 或者 ./gcc -v ，也可以把该目录添加到环境变量中去

	    -在clion中配置MinGW,如图：aosp项目构建与开发_3_clion配置MinGW
	    
	    -native代码编译			
	     在clion中直接打开代码所在项目(有CMakeLists.txt)的目录即可
	     比如：想打开android_os_MessageQueue.cpp所在的项目，先通过find查找目录
		   	find ./ -name "android_os_MessageQueue.cpp"
		   返回的目录名是 ./frameworks/base/core/jni/android_os_MessageQueue.cpp
		   在/out/development/ide/clion/frameworks/base/ 目录下面可以看到一个CMakeLists.txt文件，里面是project(frameworks_base)工程配置。所以打开这个目录就可以了
		   打开后会自动编译，编译成功后会在External Libraries中看到依赖的头文件
	     把项目打开方式从project 改称 Project Source Files就可以当先项目的cpp源文件了，编译后的源文件已经建立了索引，可以方便的进行阅读
		
	     打开对应的项目目录后,会自动编译，编译成功会在External Libraries中看到关联的源码
	     常见问题：
		     -如果是在linux环境下编译cmakelist，然后把代码拷贝到windows环境中去查看，注意每个CMakeLists.txt里由有一个root路径这个路径是在编译期间生成的
		      如果更换目录这个地方需要批量修改 如：set(ANDROID_ROOT D:/myworks/android-12.1.0_r11)，如果不修改，编译期间也会提示这里的问题
		     -指令集修改：编译的时候有的时候会提示 对应指令集的目录不存在，可以到实际的目录中看看一般改成 -86_64 就可以
			          比如 add_subdirectory(libs/hwui/libhwui-arm64-android) 改称 add_subdirectory(libs/hwui/libhwui-x86_64-android)
		     
