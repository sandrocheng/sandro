1、什么是maven
	maven是用来解决传统项目管理的jar包依赖的问题，如图：1_传统项目管理状态分析
	maven的本质是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型(POM)

	POM(Projcet Object Model):项目对象模型，如图：1_项目对象模型

2、maven的作用
	-项目构建：提供标准的、跨平台的自动化项目构建方式
	-依赖管理：方便快捷的管理项目依赖的资源(jar包)，避免资源间的版本冲突问题
	-统一开发结构：提供标准的、统一的项目代码结构，比如现在一般java代码放在src中，编译好的类放在classes目录中这些文件存放的地方以及命名都是受到了maven的影响而最终统一起来

3、maven下载和安装
	-官网：https://maven.apache.org/
	
	-windows安装
		-下载apache-maven-3.9.8-bin.zip解压缩即可

		-bin目录下的mvn就是maven的核心指令
		 打开mvn.cmd文件会看到 需要读取JAVA_HOME环境变量
		 还会看到需要一个 MAVEN_HOME,需要配置一下

		-boot目录，这个目录下有一个jar包，它就是maven的类加载器

		-conf目录，这里放的是maven的核心配置文件
			logging目录中，存放了运行时期的log日志，可以用来判断问题
			setting.xml是maven的核心配置文件

		-lib目录，这里是maven依赖的第三方jar包

		-配置MAVEN_HOME和JAVA_HOME
			在环境变量中增加 MAVEN_HOME环境变量 ，比如 D:\software\apache-maven-3.9.8
			在path环境变量中增加 %MAVEN_HOME%\bin
		-配置好以后，在cmd窗口中任意地方执行mvn -v，会提示maven的版本号

	-linux安装
		-下载apache-maven-3.9.8-bin.tar.gz文件
		
		-解压缩到 /opt目录中
		 tar -zxvf apache-maven-3.9.8-bin.tar.gz -C /opt/

		-配置MAVEN_HOME
		 编辑.bashrc或.bash_profile文件，添加以下内容：
			export M2_HOME=/opt/apache-maven-3.9.8
			export PATH=$PATH:$M2_HOME/bin
		 刷新配置文件
		 	source ~/.bashrc
		 配置成功后，mvn -v可以看到 maven的版本号以及java环境
		
4、maven的基础概念
	-仓库仓库用于存储资源，包含各种jar包，
	 	-中央仓库，由maven管理的仓库，里面有各企业开放的第三方jar包
		-本地仓库，本地仓库用于保存项目从中央仓库中拉取第三方库，它是中央仓库的一个子集
		 依赖项目会优先去本地仓库查找依赖的jar包，如果没有则从中央仓库拉取
		-私服仓库,为了提升拉取效率，很多企业会创建私服，本地仓库优先从私服拉取，如果私服没有，再从中央同步到私服上，再返回给本地仓库

		-私服的作用
		 保存具有版权的资源，包含购买或自主研发的jar,中央仓库中的jar都是开源的，不能存储具有版权的资源
		 一定范围内共享资源，仅对内部开放，不对外共享

	-坐标，在中央仓库中保存了大量的第三方jar包，为了提升查询效率，maven使用坐标描述仓库中资源的位值
		maven中央仓库：https://repo1.maven.org/maven2/
	 在官网中根据包名可以大概找到某个jar包的位值，但是也由可能找不到，比入找apache，它实际上是在org里的，在第一层是找不到的

	 在maven要想准确找到jar包的位值，需要使用坐标信息，坐标信息包含一下几个部分
		-groupId:定义当前maven项目隶属的组织名称，通常是域名反写，例如：org.mybatis
		-artifactId:定义当前maven的项目名称，通常是模块名称，例如：CRM，SMS
		-version:定义当前项目的版本号
		-packaging:定义该项目的打包方式，它虽然不属于坐标，但是也是对jar包的一个比较重要的描述

	 坐标的作用：
		使用唯一标识，唯一性定位资源的位值，通过该标识可以将资源的识别与下载工作交由机器完成
	
	 坐标的查询
		如果只知道大概的包名，在引用前，需要先查询一下这个包具体对应哪个坐标描述文件
		Maven仓库的官网网址是https://mvnrepository.com/，这是一个公共仓库地址，可以在这里查找和添加缺失的依赖。
		在这里可以根据jar包的名称查找，点击对应的版本，会提示坐标信息，有maven,gradle,等等写法
			<dependency>
			    <groupId>junit</groupId>
			    <artifactId>junit</artifactId>
			    <version>4.12</version>
			    <scope>test</scope>
			</dependency>

5、本地仓库配置
	
	windows默认是在C:\Users\[当前用户名]\.m2中，linux默认是在${user.home}/.m2/目录下
	通过修改settings文件更换本地仓库位值,([maven的安装目录]\conf\settings.xml)
		
	在settings标签下面一般会有一个注释掉的localRepository标签，把这个标签打开，内容就是本地仓库的绝对地址
	比如：<localRepository>D:\ProgramData\mvnRepo</localRepository>

6、远程仓库配置
	mvn内部默认拉取的远程仓库是中央仓库，因为在境外，所以速度比较慢
	可以通过设置镜像仓库，优先使用国内的镜像，这样速度更快

	设置的位值是在settings.xml中的mirrors标签
		<mirrors><!--镜像集合配置-->
		  <mirror><!--配置某一个具体的仓库的下载镜像-->
		    <id>nexus-aliyun</id><!--此镜像的唯一标识，用于区分不同的mirror元素-->
		    <mirrorOf>central</mirrorOf><!--对哪种仓库镜像，简单说就是替代哪个仓库,central就是中央仓库的ID-->
		    <name>Nexus aliyun</name><!-- 镜像名称 -->
		    <url>https://maven.aliyun.com/repository/public</url><!-- 镜像URL -->
		  </mirror>
		</mirrors>

7、全局setting与用户setting的区别
	全局setting定义了当前计算机中maven的公共配置，[maven的安装目录]\conf\settings.xml
	用户setting定义的是当前用户的配置，用户setting.xml可以放到 本地仓库配置路径中，用户setting的属性会覆盖全局setting的属性

8、手动制作一个maven项目
	代码详见/project/MavenHelloWorld

	maven工程目录结构如图：8_maven工程目录结构
	在src中的main 和 test目录中实现 一个类，以及对应的测试类

	在src的同层目录中增加maven配置文件，pom.xml
		<?xml version="1.0" encoding="UTF-8"?>
		<!--project 是根元素-->
		<project 
			xmlns="http://maven.apache.org/POM/4.0.0" 
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		  	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
		
		  <!-- maven的pom对象模型的版本号，目前基本都是4.0.0-->	
		  <modelVersion>4.0.0</modelVersion>
		 
		  <!--定义当前项目坐标--> 
		  <groupId>com.sandro</groupId> <!--组织ID-->
		  <artifactId>MavenHelloWorld</artifactId><!--项目ID-->

		  <!--版本号，通常有release(发布版)和SNAPSHORT(开发版)-->
		  <version>1.0.0-SNAPSHOT</version>
		  <packaging>jar</packaging><!--项目结果 jar:纯jar项目打jar包，war:web项目打war包，不写packaging,默认打jar包-->
		
		  <!--当前项目依赖的第三方jar集合-->
		  <dependencies>
		    <!--junit坐标--> 	
		    <dependency>
		  	<groupId>junit</groupId> <!--组织ID-->
		  	<artifactId>junit</artifactId>
		  	<version>4.12</version>
		    </dependency>     
		  </dependencies>	
		</project>

9、maven项目构建命令
	maven构建命令使用 mvn开头，后面添加功能参数，可以一次执行多个命令，使用空格分隔，在pom.xml所在的目录下执行
		mvn compile , 编译，编译成功后，工程依赖的jar包，maven编译需要使用的插件，会下载到maven本地库中，同时编译的相关文件和编译后的class文件会放到target目录下
		mvn clean ,   清理，执行后，相关的编译文件都会删除，比如target目录
		mvn test ,    测试，会编译，并执行test目录下的测试类,测试结果除了在控制台展示以外，还把结果保存到了/target/surefire-reports目录下
		mvn package , 打包成功后，会在target目录下看到对应的jar包，打的包中不包含依赖的jar包
		mvn install , 安装到本地，会根据pom.xml的坐标信息，把jar包以及相关文件放到本地仓库中，这样其他项目也可以根据maven的规范引用这个jar包了

10、使用mvn命令创建工程
	相对于手动制作maven项目，maven实际上提供了比较方便的命令创建各种不同规格的项目
	
	mvn archetype:generate                                   #根据模板创建
	    -DgroupId={project-packaging}                        #groupId
	    -DartifactId={project-name}                          #artifactId
	    -DarchetypeArtifactId=maven-archetype-quickstart     #使用java项目模板，maven提供各种模板，比如web的，android的，等等
	    -DinteractiveMode=false                            

	创建普通java项目：
		mvn archetype:generate
		    -DgroupId=com.sandro
		    -DartifactId=HelloMaven
		    -DarchetypeArtifactId=maven-archetype-quickstart
		    -DinteractiveMode=false
		    -Dversion=1.0.0-snapshot 
	
	创建web工程：
		mvn archetype:generate
		    -DgroupId=com.sandro
		    -DartifactId=HelloWebMaven
		    -DarchetypeArtifactId=maven-archetype-webapp
		    -DinteractiveMode=false
		    -Dversion=1.0.0-snapshot 

11、在IDEA中创建web的maven项目
	代码详见project/IDEAMavenProject
	-在IDEA中配置maven
		-配置前需要确认IDEA和maven之间的兼容关系，下载合适的IDEA和maven版本
		 IDEA内部默认会有一个maven，可以使用这个maven或者下载一个和内置版本号一致的maven
		 当使用多个IDE 的时候最好统一使用同一个的maven，方便管理
	
	-IDEA中创建一个 empty project
		setting 找到maven 配置本地maven安装路径,每次打开新的project都要设置，否则默认是使用IDEA自带的maven
		setting.xml 文件要override一下，选择本地maven的setting.xml配置文件
		
		在当前project中new 一个 Module,使用 maven Archetype创建，在里面可以选择需要的模板
		创建后，就会根据模板生成对应的项目目录结构
		
		默认有些文件夹是不创建，比如resources，手动创建后需要在IDEA里标记为资源目录，可以右键文件夹->Mark Directory as -> 进行选择
		也可以右键module->open module settings,在module中选择需要的资源目录		

		在IDEA中可以使用右侧maven插件进行maven 的clean, compile等操作
		IDEA的maven插件中还可以看到依赖的第三方资源，注意，修改pom.xml的第三方依赖时，这里要刷新一下。

	-创建web module，在project下 new moudule,使用web模板创建一个web模块
		创建后自动就有了一个jsp的页面，如果想运行，还需要使用tomcat插件执行
		
		在maven坐标库中搜索 Apache Tomcat Maven Plugin :: Tomcat 7.x ，选择2.1版本，查看maven坐标
			<dependency>
			    <groupId>org.apache.tomcat.maven</groupId>
			    <artifactId>tomcat7-maven-plugin</artifactId>
			    <version>2.1</version>
			</dependency>
			
		在pom.xml中使用build标签，构建插件依赖
			 <build><!--构建-->
			    <plugins><!--添加插件依赖集合-->
			      <plugin> <!--具体的某个插件配置-->
			        <groupId>org.apache.tomcat.maven</groupId>
			        <artifactId>tomcat7-maven-plugin</artifactId>
			        <version>2.1</version>
			      </plugin>
			    </plugins>
			  </build>
		如果是首次设置插件依赖，在build->Sycn中会提示没有这个包，点击sync里面的刷新按钮，会开始下载插件
		下载成功后，在maven插件可控制台里的找到对应的module，刷新后会看到plugins中多出来一个tomcat7插件
		双击tomcat7中的 tomcat7:run,启动tomcat服务器，启动后，在启动log里会看到当前项目的服务地址，在浏览器中就可以执行了
		
		默认端口号是8080，地址根路径是项目的名字
		可以在tomcat插件中重新设置根路径和端口号
			  <build><!--构建-->
			    <plugins><!--添加插件依赖集合-->
			      <plugin> <!--具体的某个插件配置-->
			        <groupId>org.apache.tomcat.maven</groupId>
			        <artifactId>tomcat7-maven-plugin</artifactId>
			        <version>2.1</version>
			        <configuration>
			          <port>80</port><!--设置端口为80，默认是8080-->
			          <path>/</path><!--设置根路径 ，默认是 /[artifactId]名-->
			        </configuration>
			      </plugin>
			    </plugins>
			  </build>		
		 重启tomcat，如果抛错：Failed to initialize end point associated with ProtocolHandler ["http-bio-80"]
		 1）端口被占用,可以使用命令如netstat -ano | findstr <端口号>（Windows）或lsof -i:<端口号>（Linux/Mac）来检查端口占用情况。
		 2) 确保运行Tomcat的用户有足够的权限来绑定到指定端口。在Linux/Mac系统上，通常需要root权限；在Windows上，这不是一个常见问题。
		    比如使用命令行 ： sudo idea.sh来运行，但是这么运行因为user变了，很多当前user的文件需要在root用户上再有一份才性

		配置web运行，每次到maven插件导航栏中找moudle,再找tomcat,运行tomcat7:run，比较麻烦，可以配置一下"运行"，这样就可以像运行java程序一样运行web项目，相对方便一些
			1)点击 "运行"的选择框，在弹出的选项中点击Edit Configuration...
			2)点击"+" add New Configation,在弹出来的项目类型中选择maven
			3)选择项目，在Run 命令行编辑框内，输入：tomcat7:run
		配置好以后，每次就可以在"运行"中 发布项目，并启动tomcat了

12、依赖管理
	-项目详见：/project/mavenDependency		
	-依赖配置
	 依赖指当前项目运行所需要的jar，一个项目可以设置多个依赖
	 格式：
		  <!--设置当前项目所依赖的所有jar-->
		  <dependencies>
		    <!--设置具体的依赖-->
		    <dependency>
		      <!--依赖所属项目ID-->
		      <groupId>junit</groupId>
		      <artifactId>junit</artifactId><!--依赖所属项目ID-->
		      <version>4.12</version><!--依赖版本号-->
		      <scope>test</scope>
		    </dependency>
		  </dependencies>
	 项目中有三个模块，每个模块都是一个java程序，使用quickstart建立的maven项目
	
	-依赖传递
	 在项目内，一个模块不仅可以依赖第三方的包，也可以依赖其他项目
	 比如，javaApp02依赖javaApp03，在javaApp02的pom.xml中配置 javaApp03的依赖			
		  <dependencies>
		    <dependency>...</dependency>
		    <dependency>...</dependency>
		    <dependency>
		      <groupId>com.sandroC</groupId>
		      <artifactId>javaApp03</artifactId>
		    </dependency>    
		  </dependencies>	
	 配置之后，会在IDEA的maven操作台上看到javaApp02依赖的项目中包括了javaApp03。
	 由于app02和app03依赖的log4j的版本不一样，因此在maven插件控制台上可以看到app02依赖的app03中，包含了一个log4j,并且提示omitted for duplicate,如图：12_maven项目依赖.png
	 
	 这里面直接配置的dependency的包称为直接依赖，通过依赖传递，直接依赖里的包，它所依赖的其他包，相对于当前项目称为间接依赖

	 如图：12_maven依赖冲突，直接依赖的资源是1度资源，间接依赖的资源是2度资源，间接依赖后面再依赖的是3度、4度资源依次类推
	 在这些包中，1度资源优先级最高，其次是2度资源，依次类推，相同的包，优先级高的覆盖优先级低的。
	 因此javaApp02模块中使用的是1.2.12版本的log4j,而不是javaApp03依赖的log4j:1.2.13
	 依赖传递冲突问题：
		路径优先：当依赖传递中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高
		声明优先：当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的	
		特殊优先：当同级配置了相同资源的不同版本，后配置的覆盖先配置的 	
	
	-可选依赖
	 可选依赖是指对外隐藏当前所依赖的资源——不透明
	    <dependency>
	      <groupId>log4j</groupId>
	      <artifactId>log4j</artifactId>
	      <version>1.2.13</version>
	      <optional>true</optional><!--true代表可选依赖，对外隐藏自己用了这个包-->
	    </dependency>
	 
	-排除依赖
	 排除依赖指主动断开依赖的资源，被排除的资源无需指定版本--不需要
	 有些情况下，比如接入方已经通过其他方式，比如直接拷贝了源码到项目里了，或者直接通过jar包接入了，此是再用maven接入依赖这个包的第三方包，会导致编译出错
	 使用exclusions可以保证接入的包只使用外部的第三方包，方便编译。
		    <dependency>
		      <groupId>junit</groupId>
		      <artifactId>junit</artifactId>
		      <version>4.12</version>
		      <scope>test</scope>
		      <exclusions><!--配置需要排除的包的集合-->
		        <exclusion><!--具体需要排除的包-->
		          <groupId>org.hamcrest</groupId>
		          <artifactId>hamcrest-core</artifactId>
		        </exclusion>
		      </exclusions>
		    </dependency>

13、依赖范围
	-在dependency中可以配置scope标签，scope有5种值：compile,provided,runtime,system,test,这5种值代表不同的依赖范围
	 依赖的jar默认情况可以在任何地方，通过scope标签设定其作用范围
	 作用范围：
		主程序范围有效--main文件夹范围内
		测试程序范围有效--test文件夹范围内
		是否参与打包--package指令范围内
	 如图：13_作用范围与socpe参数的关系。

	-依赖范围的传递性
	 依赖范围的资源在进行传递时，作用范围将受到影响，如图13_依赖范围的传递性

14、生命周期
	-Maven构建生命周期描述的是一次构建过程经历了多少个事件
	 比如：
		从编译到安装到本地库的完整生命周期过程：compile->test compile->test->package->install，主要由这5个事件组成

	-Maven对项目构建的生命周期划分为3个大的阶段
		-clean:清理工作
			-pre-clean:执行一些需要在clean之前完成的工作
			-clean:移除上一次构建生成的文件
			-post-clean:执行一些需要在clean之后立刻完成的工作

		-default:核心工作，比如：编译，测试，打包等等
			-validate,校验                          校验项目是否正确，并且所有必要的信息可以完成项目的构建过程
			-initialize,初始化                      初始化构建状态，比如设置属性
			-generate-sources,生成源代码            生成包含在编译阶段中的任何代码
			-process-sources，处理源代码            比如说过滤任意值
			-generate-resources,生成资源文件        生成将会包含在项目包中的资源文件
			-process-resources,处理资源文件         复制和处理资源到目标目录，为打包阶段做好准备
			-compile,编译
			-process-classes，处理类文件            处理编译生成的文件，比如说对java class文件做字节码改善优化
			-generate-test-sources，生成测试源代码  生成包含在编译阶段中的任何测试源代码
			-process-test-sources，处理测试源代码   为测试创建资源文件
			-test-comile,编译测试源代码             编译测试源代码到测试目标目录
			-process-test-classes，处理测试类文件   处理测试源代码编译生成的文件
			-test,测试                              使用合适的单元测试框架运行测试，比如Junit
			-prepare-package，准备打包		在实际打包之前，执行任何必要的操作，为打包做准备
			-package,打包                           将编译后的代码打包成可分发格式的文件，比如:jar,war,或者 ear文件
			-pre-integration-test,集成测试前        在执行集成测试前进行必要的操作，比如搭建需要的环境
			-integration-test，集成测试             处理和部署项目到可以运行的集成测试环境中
			-post-integration-test，集成测试后      在执行集成测试完成后进行必要的动作，比如清理集成测试环境
			-verify,验证                            运行任意的检查来验证项目包有效且达到质量标准。
			-install,安装                           安装项目包到本地仓库，这样项目包可以用作其他本地项目的依赖
			-deploy，部署				将最终的项目包复制到远程仓库中与其他开发者和项目共享

		-site:产生报告，发布站点等。
			-pre-site      执行一些需要在生成站点文档之前完成的工作
			-site          生成项目的站点文档
			-post-site     执行一些需要在生成站点文档之后完成的工作，并且为部署做准备
			-site-deploy   将生成的站点文档部署到特定的服务器上 

	 在每个大的阶段中，执行某个子阶段的事件，会把之前的所有的事件都执行，比如执行defalut阶段中的test事件，会把从validate到process-test-classe中的所有事件都执行一遍。	

15、插件
	-插件与生命周期的阶段绑定，在执行到对应生命周期时，执行对应的插件功能
	 默认maven在各个生命周期上绑定有预设的功能
	 通过插件可以自定义其他功能

	-插件配置
	 例如javaApp03种配置了编译插件如下：
		  <build>
		    <plugins>
		      <plugin>
		        <!--插件的坐标，在maven官网中，有一个Maven Plugins链接，里面有所有的maven插件-->
		        <!--插件分很多种，比如工程类的(clean,install等)，打包类的(ear,ejb,jar,war等)，生成报告类的(javadoc,surefire-report等)-->
		        <groupId>org.apache.maven.plugins</groupId>
		        <artifactId>maven-source-plugin</artifactId>
		        <version>3.3.1</version>
		        <executions>
		          <execution><!--这里标记的是源码的插件是执行在什么时候的-->
		            <goals>
		              <goal>jar</goal><!--官网中给出了Goals Overview里 提供了5种类型-->
		            </goals>
		            <phase>generate-test-resources</phase><!--构建生命周期的 generate-test-resources事件-->
		          </execution>
		        </executions>
		      </plugin>
		    </plugins>
		  </build>
	 配置好以后，会在Maven控制台中javaApp03->plugins中多出了一个source插件
	 clean一下项目，运行compile,此是target中，只生成了classes和maven-status这两个文件夹
	 继续执行test,这时候发现在target中多出了一个javaApp03-1.0-SNAPSHOT-sources.jar,这个jar包就是maven-source-plugin插件生成的，里面只有main目录的代码，没有test目录的代码
         如果把goal标签中的jar改成test-jar,clean之后再运行test会生成 javaApp03-1.0-SNAPSHOT-test-sources.jar，这里面是test目录下的代码
	 也可以在goals标签中配置多个goal，比如配置一个jar 和 test-jar,这样在对应生命周期事件执行的时候就会生成两个jar包

	-每种插件功能和运行方式都不太一样使用前需要看好官方文档。
		  
16、分模块开发与设计
	大的业务系统开发的时候，一般会拆分模块，比如表现层，DAO层，业务层从一个项目中拆分出来多个子业务，每个子业务之间在进行maven依赖，这样更方便多人合作以及业务部署
	项目详见：projects/MavenMultipleModules
	-新建一个空的工程empty project，并在setting中设置本地maven路径
	-创建一个domain层module，用于为dao层，controller层提供POJO对象,使用maven创建module ,使用quickstart模板创建一个纯java的模块
	 因为是POJO，所以只要一个java目录就可以，如果创建的是一个空moudle，可以右键module->new Directory,然后选择需要的maven source directory。
	 在项目中新建一个类 ：multiple.modules.domain.User
	 这个项目只是定义的类都是POJO，用于给service ,dao,controller层提供依赖，所以pom.xml也不需要依赖第三方类库，一些基本的坐标定义就足够了,编译一下测试项目是否正常即可
	 编译成功后，执行maven的install，把项目编译的类库放到maven本地库中，便于其他依赖使用		 

	-创建dao模块
	 使用maven创建module ,使用quickstart模板创建一个纯java的模块
	 配置spring依赖，mybatis，mysql环境，spring整合jdbc，pring整合mybatis，druid连接池，分页插件坐标，junit
	 配置moudle依赖，dao 需要依赖 domain提供的POJO
         编译成功后，执行maven的install，把项目编译的类库放到maven本地库中，便于其他依赖使用
	
	-创建service模块
	 使用maven创建module ,使用quickstart模板创建一个纯java的模块
	 配置moudle依赖，service 需要依赖 dao和domain,因为，dao已经依赖了domain，根据maven依赖传递的原理,service只要依赖了dao，domain自然也会被依赖上。
	 配置spring依赖：
		因为dao已经依赖了spring，根据依赖传递，其实只要引入的dao，service是可以不需要引入spring的
		除非，有多个service，某些service不需要依赖dao,这些serive如果需要spring框架，就得自己依赖spring了
	 
	-创建controller模块
	 controller是表现层，因此需要创建一个web项目
	 -创建一个controller层module,使用maven创建module ,使用maven-archetype-webapp模板创建一个web项目
	 -配置service依赖，springmvc依赖 jackson依赖，servlet依赖
	 -配置tomcat 插件

17、聚合
	-详见：/project/MavenAggregationModules
	-分模块开发往往会带来多模块构建维护的问题，如图:17_使用聚合解决模块更新的问题

	-项目中有4个相对独立逐一依赖的模块，controller,service,dao,domain
	-新建一个maven moudule , aggregation ,这里不需要任何资源文件，只保留一个pom.xml即可
	-使用 <packaging>pom</packaging>  标签，定义该工程是专门用于构建管理的，这个标签的含义是，这个模块只提供pom文件
	-使用 <modules> 标签 ，定义需要管理的项目
	-统一编译
	 在IDEA的Maven管理插件上，执行aggregation的compile,会看到所有被管理的模块都会被编译
	 也可以install，所有被管理的模块都会上传到本地maven库中

	-编译顺序
		[INFO] Reactor Build Order:
		[INFO] 
		[INFO] domain                                                             [jar]
		[INFO] dao                                                                [jar]
		[INFO] service                                                            [jar]
		[INFO] controller Maven Webapp                                            [war]
		[INFO] aggregation                                                        [pom]	
	 从编译log中可以看到，maven会自动根据依赖关系找到最合理的编译顺序，如果项目中的依赖关系比较复杂，比如不是线性的关系，有了回路。那么maven就会参考modules标签中配置的顺序去编译
         		 
18、继承
	-详见：/project/MavenInheritModules
	 如图：18_继承关系维护
	 通过继承，子项目可以使用父项目的配置，提升项目的整体性
	 
	-继承设置
	 和聚合一样，需要配置一个统一管理项目的pom项目，MainModule
	 使用dependencyManagement标签，声明进行依赖管理，在该标签内配置dependencies,把所有的依赖都在这里定义
	 controller依赖的tomcat插件标签也放到MainModule的pom文件中 

	 在build标签内使用pluginManagement标签，声明插件配置，比如tomcat

	-子moudle设置
	    <!--定义该工程的父工程-->
	    <parent>
	        <groupId>com.inherit.modules</groupId>
	        <artifactId>MainModule</artifactId>
	        <version>1.0-SNAPSHOT</version>
	        <relativePath>../MainModule/pom.xml</relativePath><!--填写父工程的pom文件路径-->
	    </parent> 

	 在每个子工程中都要设置父工程的坐标和路径，
	 定义父工程以后，子工程的groupId，就可以去掉了，子工程和父工程默是在一个groupID下
	 子工程尽量和父工程的版本号也统一，所以version也去掉
	
	 子工程依赖的第三方库，由于父工程已经定义了，因此可以删掉version，保证整个项目的version都是由父进程配置

	 子工程build的插件，父工程也声明了，因此插件的version也要删掉，保证项目verison的统一

	 子工程依赖的第三方能库如果不删除version，那么在编译的时候还是会按照子工程依赖的版本加载第三方库，但是这么做需要谨慎，可能会造成整体项目内版本不统一，而导致项目运行的风险。

	-总结
	 通过继承可以实现在子工程中沿用父工程的配置，maven中的继承和java继承相似，在子工程中配置继承关系

	-可继承的资源
		-groupid:项目组ID，项目坐标的核心元素
		-version:项目版本，项目坐标的核心元素
		-description:项目的描述信息
		-organization:项目的组织信息
		-inceptionYear:项目的创始年份
		-url：项目的url地址
		-developers:项目的开发者信息
		-contributors:项目的贡献者信息
		-distrbutionManagement:项目的部署信息
		-issueManagement:项目的缺陷跟踪系统信息
		-ciManagement:项目的持续集成系统信息
		-scm:项目的版本控制系统信息
		-malilingList:项目的邮件列表信息
		-properties:自定义的maven属性
		-build:包括项目的源码目录配置，输出目录配置，插件配置，插件管理配置等
		-reporting:包括项目的报告输出目录配置，报告插件配置等

19、聚合与集成
	-作用
	 聚合用于快速构建项目
	 继承用于快速配置
	
	-相同点
	 聚合与继承的pom.xml文件打包方式均为pom,可以将两种关系制作到一个pom文件中
	 聚合与继承均属于设计型模块，并无实际的模块内容
	
	-不同点
	 聚合是在当前模块中配置关系，聚合可以感知到参与聚合的模块都有哪些
	 继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己

20、属性
	-详见：/home/sandro/mywork/gitwork/sandro/project/MavenAttributeModules
	-对于同一个组织第三方的多个类库，有可能在引入的时候版本号会写成不一样的
	 比如：org.springframework:spring-context:5.1.9.RELEASE , org.springframework:spring-jdbc:5.2.1.RELEASE
	      这两个包都是spring的，但是由与是分开引用，有可能引用的时候版本不是一个版本，这种也会带来版本不一致的风险

	 maven可以通过配置一个属性，类似java中的变量，所有相关的地方都引用这个属性，改值的时候只要改这个属性就可以了
	 
	-定义属性
	 在MainModule的pom文件中增加如下配置
		  <!--定义自定义属性-->
		  <properties>
		    <spring.version>5.1.9.RELEASE</spring.version> <!--定了一个spring.version的属性-->
		  </properties>		
	 
	-使用属性
	 属性定义好以后可以在需要使用的地方通过 ${spring.version} 来引用
	 比如：
	      <!--spring环境-->
	      <dependency>
	        <groupId>org.springframework</groupId>
	        <artifactId>spring-context</artifactId>
	        <version> ${spring.version} </version>
	      </dependency>
	 
	-maven的默认属性
	 在MainModule中，子项目的版本是写死的，可以使用${version}来使用MainModule的版本
	      <dependency>
	        <groupId>mymaven.attribute</groupId>
	        <artifactId>service</artifactId>
	        <version>${version}</version><!--子项目统一使MainModule的版本-->
	      </dependency>	
	 通过综合使用集成，继承和属性，让所有子项目的版本都统一起来

	-maven的5大属性
		-子定义属性，等同于定义一个变量，方便统一维护
		-内置属性，maven事先定义好的属性，快速配置，比如：${version},${basedir}
		-Setting属性,使用Maven配置文件Setting中的标签属性，用于动态配置，调用格式：${settings.localRepository}
		-Java系统属性,读取java的系统属性，比如:${user.home}
			      系统属性的查询方式：mvn help:system
		-环境变量属性,调用格式：${env.JAVA_HOME}

21、版本管理
	-SNAPSHOT,快照版本
	 项目开发过程中，为方便团队成员合作，解决模块间相互依赖和实时更新的问题，开发者对每个模块进行构建的时候，输出的临时性版本叫做快照版本(测试阶段版本)
	 快照版本会随着开发的进展不断更新

	-RELEASE(发布版本)
	 项目开发进入阶段里程碑后，向团队外部发布较为稳定的版本，这种版本所对应的构件文件是最稳定的，即便进行功能的后续开发，也不会改变当前发布版本内容，这种版本称为发布版本

	-工程版本号约定
	 约定规范：
		-<主版本>.<次版本>.<增量版本>.<里程碑版本>
		-主版本：表示项目的重大变更，比如：spring5相较于spring4的迭代
		-次版本：表示有较大的功能增加和变化，或者全面系统的修复漏洞
		-增量版本：表示有重大漏洞的修复
		-里程碑版本：表明一个版本的里程碑(版本内部)。这样的版本同下一个正式版本相比，相对来说不是很稳定，有待更多的测试
	 例如：5.1.9.RELEASE

22、资源配置
	如图：22_资源配置多文件维护,maven可以通过继承，属性定义，将多个重要信息集合到父文件中统一管理
	但是项目中还有很多properties文件的数据是单独管理的，比如：dao中的jdbc.properties，这些properties文件中的数据也可以统一起来，一起管理
	详见：/project/MavenPropertiesModules

	-properties文件配置
	 dao中，有关于数据库jdbc的配置文件：jdbc.properties文件，这个文件中的数据可以提出一个变量，放到MainMoudle中以属性的方式定义
	 dao中的jdbc.properties文件中的jdbc.url 就可以通过jdbc.url=${daojdbc.url}来引用MainMoudle中定义的值
	
	-配置管理properites文件
	 在MainMoudle的pom中的build标签下，增加<resources>标签，用来表明哪个资源文件会被maven管理
	    <resources><!--需要maven管理的资源文件-->
	      <resource>
	        <!--project.basedir,表示通配所有maven项目，这里就表示说把所有子项目的resources都做为maven的管理目标-->
	        <directory>${project.basedir}/src/main/resources</directory>
	        <filtering>true</filtering><!--开启对配置文件的资源加载过滤，false表示不管理这个目录-->
	      </resource>
	    </resources>	  

	    <testResources><!--需要maven管理的test资源文件-->
	      <testResource>
	        <!--project.basedir,表示通配所有maven项目，这里就表示说把所有子项目test中的resources都做为maven的管理目标-->
	        <directory>${project.basedir}/src/test/resources</directory>
	        <filtering>true</filtering><!--开启对配置文件的资源加载过滤，false表示不管理这个目录-->
	      </testResource>
	    </testResources>	 
	编译后在target的classes文件夹中查看编译后的jdbc.properties文件，此是，jdbc.url的值已经替换成MainModule中pom定义的属性的值了
