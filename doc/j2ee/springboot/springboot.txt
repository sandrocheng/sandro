1、什么是spring
	spring是一个开源框架，2003年兴起的一个轻量级的java开发框架，作者：Rod Johnson。
	Spring是为了解决企业级应用开发的复杂性而创建的，简化开发的框架

2、spring是如何简化开发的
	为了降低java开发的复杂性，spring采用了以下4种关键策略：
	1）基于POJO的轻量级和最小侵入性编程
	2）通过IOC，依赖注入(DI)和面向接口实现松耦合
	3）基于切面(AOP)和惯例进行声明式编程
	4）通过切面和模板减少样式代码

3、什么是springboot
	-开发web应用，最开始是使用Servlet结合Tomcat，跑出一个hello wrold程序，需要经历特别多的步骤
	 后来使用了structs，再后来是springMVC,目前流行的是springboot
	 springboot就是一个java web的开发框架，和springMVC类似，对比其他java web框架的好处是简化开发，约定大于配置，能迅速开发web应用

	-所有的计数框架似乎都遵循了一条主线规律：从一个复杂应用场景衍生出一种框架，人们只需要进行各种配置而不需要亲自实现它，这时候强大的配置功能就成为了有点
	 发展到一定程度之后，人们根据实际生产应用情况，选取其中使用功能和设计精华，重构出了一些轻量级的框架
	 之后为了提高效率，嫌弃原先的各种配置过于麻烦，于是开始提倡“约定大于配置”，进而衍生出一些一站式的解决方案
	 这就是java企业级应用->j2ee->spring->springboot的过程
	
	-随着spring不断的发展，涉及的领域越来越多，项目整合开发需要配合各种各样的文件，慢慢变得不那么易用简单，甚至人称配置地狱。
	 springboot正是在这样的一个背景下被抽象出来的开发框架，目的是为了让大家更容易的使用spring，更容易的集成各种常用的中间件、开源软件

	-springboot 基于 spring开发，spring boot本身并不提供spring框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于spring框架的应用程序。
	 也就是说它并不是用来替代spring的解决方案，而是和spring框架紧密结合用于提升spring开发者体验的工具。spring boot以约定大于配置的核心思想，默认帮我们进行了很多配置
	 多数spring boot应用只需要很少的spring配置。同时它集成了大量常用的第三方库配置(例如：Redis,MongoDB,Jpa,RabbitMQ,Quartz等等)，spring boot应用中这些第三方库几乎可以零配置的开箱即用
	
	-简单来说，就是springboot其是不是什么新鲜的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架
         springboot出生名门，从一开始就站在一个比较高的起点，又经过这几年的发展，生态足够完善。

4、springboot的主要优点
	-为所有spring开发者更快的如门
	-开箱即用，提供各种默认配置来简化项目配置
	-内嵌式容器简化web项目
	-没有冗余代码生成和xml配置的要求

5、什么是微服务
	-微服务是一种架构风格，它要求我们在开发一个应用的时候，这个应用必须构建成一系列小服务的组合
	 可以通过http的方式进行互通。
	
 	-单体应用架构
	 所为单体应用架构(all in one)是指，我们将一个应用中的所有服务都封装在一个应用中。
	 无论是ERP，CRM或是其他什么系统，都把数据库访问，web访问，等等各个功能都放在一个war包中
	
	 这样做的好处是易于开发和测试，也十分方便部署，当需要扩展时，只需要将war包复制多份，然后放到多个服务器上，再做个负载均衡就可以了
	
	 缺点是，哪怕要修改一个微笑的地方，都需要停掉所有服务，重新打包，部署这个war包。特别对于大型应用，我们不可能把所有内容都放在一个应用里面，如何维护如何分工合作都是问题

6、微服务架构
	all in one的架构方式，我们把所有的功能单元放在一个应用里面，然后把整个应用部署到服务器上。如果负载能力不行，我们会将整个应用水平复制，然后扩展，然后再负载均衡
	所为微服务架构，就是打破之前的all in one的架构方式，把每个功能元素都独立出来。把独立出来的功能元素的动态组合，需要的功能元素才去拿来组合
	需要多一些时可以整合多个功能元素。所以微服务架构是对功能元素进行复制，而没有对整个应用进行复制

	这样做的好处是
		1)节省了调度资源
		2)每个功能元素的服务都是一个可替换的、可独立升级的软件代码

7、如何构建微服务	
	-一个大型的微服务架构，就像一个复杂交织的神经网络，每个神经元就是一个功能元素，他们各自完成自己的功能，然后通过http相互请求调用。
	 比如一个电商系统，查缓存，连数据库，浏览页面，结帐，支付等服务都是一个个独立的功能服务，都被微化了，他们做为一个个微服务共同构建了一个庞大的系统。
	 如果修改其中一个功能，只需要更新升级其中一个功能服务单元即可。

	-但是这种庞大的系统架构给部署和运维带来很大的难度。于是,spring为我们带来了构建大型分布式的全套、全程产品：
		-构建一个个功能独立的微服务应用单元，可以使用springboot，可以帮我们快速构建一个应用
		-大型分布式网络服务的调用，这部分由spring cloud来完成，实现分布式
		-在分布式中间，进行流式数据计算，批处理，我们有spring cloud data flow
		-spring为我们想清楚了整个从开始构建应用到大型分布式应用全流程方案

8、spring boot helloworld
	jdk + maven + springboot
	IDE:IDEA
	-官网生成springbootdemo：spring.io -> project -> springboot,在首页上可以找到最新的GA版本，找到 Quickstart Your Project，点击Spring Initlalizr
	 在这里选择环境，工程名 包名等信息 dependencies 选择一个Spring Web，点击generate会自动构建项目，并提示下载

	-IDEA生成springboot项目,需要使用集成web开发环境的IDEA，在new project的时候，选择 Spring Initializr，可以方便的生成springboot初始项目

	-默认的主入口是Demo1Application，这个主入口不能删，也不要改
	 直接运行这个文件就可以启动tomcat服务了：
		main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
	 访问 http://localhost:8080/
	      因为没有配置根页面，所以可以看到服务返回的错误提示，这个时候，一个基本的web应用框架已经可以使用了
	
	 @SpringBootApplication表示当前的类就是spring的一个组件
	 
	-/src/main/resources/application.properties
	 这个是springboot的核心配置文件
	 
	-建包，因为springboot是基于约定的，所以这里必须在Demo1Application同级别建包，在其他地方建包，会出问题
         常规的包，domain,dao,service,controller

	-在controller下创建HelloController类,定义一个返回字符串的http请求接口hello,只需要配置上spring相关的注解，其他的springboot已经自动配置了，
	 之后就可以通过/localhost:8080/hello 访问这个接口的页面了

	-打包，使用maven的package命令就可以直接打成jar包，打出来的jar包，可以直接运行，内部包含了tomcat，因此服务就可以启动了
		java -jar xxx.jar
	-总结
	 如上所示，主要有4个部分
		-项目元数据信息：创建的时候输入的project metadata部分，也就是maven的项目基本元素，包括:groupId,artifaciId,version,name,description等
		-parent：继承spring-boot-start-parent的依赖管理，控制版本与打包内容等
		-dependencies:项目具体依赖，这里包含了spring-boot-start-web，用户实现http接口(该依赖包含了spring MVC)
			      官网对它的描述是:使用spring MVC构建web(包含RESTful)应用程序入门者，使用tomcat做为默认嵌入式容器
			      spring-boot-starter-test用于编写单元测试的依赖包。
		-build：构建配置部分。默认使用了spring-boot-maven-plugin,配合spring-boot-starter-parent就可以把spring boot应用打包成jar来直接运行
		
				
