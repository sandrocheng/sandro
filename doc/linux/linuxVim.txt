1、vim简单介绍
	vi: "visual interface"的简称，类似windows里的记事本。他可以执行编辑，删除，查找，替换，块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制。
	vi 是文本编辑程序，没有菜单，只有命令。
	vim 更高级一些，可以理解是vi的高级版本
	vim需要自行安装，在shell中输入 vimtutor 命令可以查看相关的帮助文档

2、vim的三种模式
	2.1 vi有三种基本工作模式：命令模式，文本输入模式，末行模式
		三种方式切换如下：
			Shell ----(vi)---> 命令模式-----(a,i)---->编辑模式	
		      	      <---(ZZ)----        <-----(Esc)---- 
		      
			命令模式 ------------------(:)-----------------> 末行模式----(wq,q,q!)---->Shell      
		         	 <----(两次Esc,Backspace,回车键)------
		编辑模式和末行模式之间不能互相切换，必须经过命令模式
	
	2.2 命令模式下的操作:
		用户按下Esc键，就可以使vi进入命令模式下
		快捷键：
			ZZ ，保存退出
		      	gg=G, 代码的格式化
		      	光标移动: h(左)，j(下)，k(上)，l(右)
		      	w,移动一个单词
		      	gg,光标移动到文件开头
		      	G，光标移动到文件末尾
		      	0，光标移动到行首
		      	$,光标移动到行尾巴
		      	[n]G,行跳转，例如：12G，光标移动到第12行
		删除命令：
			x,删除光标后一个字符，相当于Del
			X,删除光标前一个字符，相当于Backspace
			dw,删除光标开始位值的字，包括光标所在字符
			d0,删除光标前本行所有内容，不包含光标所在的字符
			D 或者 d$,删除光标后本行所有内容，包含光标所在字符
			dd,删除光标所在行，本质其实是剪切
			ndd,从光标当前行向下删除指定行数，如3dd，删除当前行下3行内容
			v/ctrl+v:使用h,j,k,l移动选择内容，然后按d删除，其中ctrl+v是列模式，v为非列模式	
		
		撤销和反撤销
			u,一步一步撤销，相当于word文档里的ctrl + z
			ctrl-r,反撤销，相当于word文档里的 ctrl + y
		
		复制、粘贴
			yy，复制当前行
			nyy,复制n行，如：5yy，复制当前开始和之后的5行
			p,在光标开始所在位值向下开辟一行，粘贴
			P,在光标开始所在位值向上开辟一行，粘贴
			剪切操作，按dd,或者ndd删除，将删除行保存到剪切板中，然后按p 或者 P 就可以粘贴了	
		
		可视模式
			v 或者 ctrl + v
			使用h,j,k,l移动选择内容
			使用d删除，使用y复制,使用p粘贴到光标后面，使用P粘贴光标前面
		
		显示行号
			临时显示行号
				命令模式下，输入“：” ，再输入“set number”或者“set nu”后按回车键，就可以显示行号了。行号显示只是暂时的。退出vim后再次打开vim就不显示行号了。
				取消显示行号：输入“：set nonu”
			
			永久显示行号
				需要修改vim配置文件vimrc。在默认情况下，用户宿主目录（~）中是没有此文件的，需要在当前用户的宿主目录中手工建立，即使用下面的命令：
				vim ~/.vimrc ，在打开的vimrc文件中最后一行输入：set number 或者 set nu，然后保存退出。再次用vim打开文件时，就会显示行号了。
		
		替换操作		
			r,替换当前字符,只能替换一个字符
			R，替换当前行光标后的所有字符
		
		查找命令
			/ , /xxxx 从光标所在的位值开始向后搜索，按n向下搜索，按N向上搜索
			? , ?xxxx,从光标所在的位值开始向前搜索，按n向上搜索，按N向下搜索
			# , 将光标移动到待搜索的字符串上，然后按n向上搜索，按N向下搜索
			shift + k ，在带搜索的字符串上按shift + k 或者 K ，可以查看相关的帮助文档	
		
		快速翻屏
			ctrl + u，向下翻半屏，相当于光标向上移动
			ctrl + d，向上翻半屏，相当于光标向下移动
			ctrl + f，向上翻一屏
			ctrl + b，向后翻一屏 				

	
	2.3 切换到文本输入模式
		i, 在光标前插入
		a, 在光标后插入
		I，在光标所在行的行首插入
		A，在光标所在行的行尾插入
		o, 在光标所在行的下面，新创建一行，行首插入
		O，在光标所在行的上面，新创建一行，行首插入
		s, 删除光标后面的字符，从光标当前位值插入
		S，删除光标所在的当前行，从行首插入
		按列模式插入，先按ctrl+v进入列模式，按hjkl移动到某列，按I或者shift + i 向前插入然后插入字符，最后按两次 Esc 退出。
		
	2.4 末行模式下操作
		在命令模式下，输入“:” ，进入末行模式
		
		保存和退出
			q , 退出，如果文档有修改，会提示文档没有保存，无法退出
			q!, 强制退出，不保存修改内容
			w, 保存内容修改，不退出
			wq,保存并对退出
			x,相当于wq
			
		下面表格中old 表示源字符，new表示新字符
			:s/old/new/，光标所在的第一个 old 替换为 new
			:s/old/new/g , 光标所在行的所有 old 替换为 new
			:m,ns/old/new/g,将第m行到第n行之间的old全部替换成new
			:%s/old/new/g,当前文件所有old替换成new
			:1,$s/old/new/g, 当前文件的所有old替换成new
			:%s/old/new/gc 同上，但是每次替换都要用户确认
			
		末行模式下执行shell命令
			!shell命令,临时退到外部执行命令，然后可以继续回到当前文档
			.!shell命令，在文档光标出插入shell命令的返回结果
			按下两次Esd，可以回到命令模式	
		
		
	2.5 分屏
		打开文件后，通过末行模式
			sp ，当前文件水平分平
			vsp, 当前文件垂直分平
			sp 文件名，当前文件和另一个文件水平分平
			vsp 文件名，当前文件和另一个文件垂直分平
			ctrl-ww, 按住ctrl，连续点击两次w，在多个窗口中切换光标
			wall/wqall/xall/qall/qall! 保存/保存退出/保存退出/退出/强制退出分平窗口
			在某一个屏幕下 末行模式执行 q ，q!,x,退出当前窗口
		
		打开文件前，在shell中，vi通过参数分屏幕
			vi -o file1 file2 ,打开file1,file2，水平分屏
			vi -O file1 file2 ,打开file1,file2，垂直分屏

3、vim 配置文件
	~/.vimrc : 修改用户级别的配置文件只会影响用户，不会影响其他用户。
		set tabstop=4 //设置缩进为4个空格
		set nu        //设置显示行号
		set shiftwidth=4 //设置gg=G 缩进4个空格，默认是缩进8个空格
		
	/etc/vim/vimrc,修改了系统级别的配置文件将影响系统下的所有用户
	说明：由于linux是多用户操作系统，建议只修改用户级别的配置文件，不要影响其他用户				
			
			
				
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
		    	 
