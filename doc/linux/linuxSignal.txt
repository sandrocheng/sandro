1、信号（signal）简介
	信号是信息的载体，linux/unix环境下非常古老并经典的通信方式，目前依然是主要的通信手段。
	信号特点：
		简单
		不能携带大量信息
		满足某个特定条件才会产生
	man 7 signal ，查看系统关于signal的介绍。

2、信号的机制
	进程A给进程B发送信号，进程B收到信号之前执行自己的代码，收到信号后，不管执行到程序的什么位值，都要暂停运行，去处理信号，处理完毕后再继续执行。与硬件中断类似——异步模式。
	但信号是软件层面的中断，早期常被成为“软中断”。
	
	每个进程都到的所有信号，都是由内核负责发送的。
	进程A给进程B发送信号示意图：
			
                        +----------+                    +----------+                
		        |   进程A  |                    |   进程B  |
                        +----------+	                +----------+    当信号产生后，内核会执行信号处理
              用户区          |                              ^          函数，信号处理函数执行完以后，会   
            ------------------|------------------------------|--------  返回到信号发生的代码的位值继续往
              内核区          |                              |          下执行。
                              |                              |  
                              |        +----------+          |
                              +------->|   内核   |----------+
                                       +----------+
	
	信号的状态：产生，未决，递达
	1)信号的产生：
		按键产生,如：Ctrl+c ,Ctrl+z,Ctrl+\
		系统调用产生，如：kill,raise,abort
		软件条件产生，如：定时器 alarm
		硬件异常产生，如：非法访问内存（段错误），除0（浮点数例外），内存对齐出错（总线错误）
		命令产生，如：kill命令	
	2）未决：产生和递达之间的状态。主要由于阻塞（屏蔽）导致该状态。
	3）递达：：递达并且到达进程。
	
	信号的处理方式：
		执行默认动作
		忽略信号（丢弃不处理）
		捕捉信号（调用用户自定义的处理函数）
		
	信号的特质：
		信号的实现手段导致信号有很强的延时性，但对于用户来说，时间非常短，不易察觉。
		linux内核的进程控制块（PCB）是一个结构体，task_struct,除了包含进程id，状态，工作目录，用户id，组id，文件描述符表，还包含了信号的相关信息，主要值阻塞信号集和未决信号集。
					
	信号四要素:
		通过 man 7 signal可以查看信号相关信息 
		1)编号:使用kill -l命令可以产看当前系统有哪些信号，不存在编号为0的信号。其中 1~31号信号称为常规信号（也叫普通信号或者标准信号）34~64称为实时信号，驱动编成与硬件相关 
		2)名称 
		3)信号对应的事件 
		4)默认处理动作 
			Term,终止进程
			Ign，忽略信号（默认即时对该中信号忽略操作）
			Core，终止进程，生成Core文件。（查验死亡原因，用于gdb调试）。
			Stop,停止（暂停）进程
			Cont：继续运行进程
		特别需要注意的是：SIGKILL 和 SIGSTOP这两个信号不能被 caught(捕获)，blocked(阻塞) 和 ignored(忽略)	
	
	几个常用到的信号：SIGINT，SIGQUIT，SIGKILL，SIGSEGV，SIGUSR1，SIGUSR2，SIGPIPE，SIGALRM，SIGTERM，SIGCHLD，SIGSTOP，SIGCONT	

	阻塞信号集：每个进程都有一个阻塞集，它用来描述哪些信号递送到该进程的时候被阻塞(在信号发生时记住它，直到进程 准备好时再将信号通知进程)。所谓阻塞并不是禁止传送信号, 而是暂缓信号的传送。
		若将被阻塞的信号从信号阻塞集中删除，且对应的信号 在被阻塞时发生了，进程将会收到相应的信号。 
	
	
	未决信号集:
    		信号产生，未决信号集中描述该信号的位立刻翻转为1，表信号处于未决状态；当信号被处理对应位翻转回为0，这一时刻往往非常短暂。
    		信号产生后由于某些原因主要是阻塞不能抵达，这类信号的集合称之为未决信号集。在屏蔽解除前，信号一直处于未决状态。
		未决信号集就是没有被处理的信号，未决信号集实际上是一个32位数，每一位代表一个信号，当信号产生的时候，就把对应的位反转为1，如果该信号未被处理就反转回0，处理了就保持为1。
	阻塞信号集会影响到未决信号集，比如说我在阻塞信号集中将2号信号为置为1，也就是将2号信号屏蔽，那么未决信号集中2号信号对应的位就会变为1（未决状态），一直阻塞在这种状态。
	

3、信号相关函数
	详见/c-pro/cProjects/linuxSignal项目

4、信号集相关
	4.1)未决信号集和阻塞信号集的关系
	阻塞信号集是当前进程要阻塞的信号的集合，未决信号集是当前进程中还处于未决状态的信号的集合，这两个集合存储在内核的PCB中。
	
	下面以SIGINT为例说明未决信号集和阻塞信号集的关系：
		当进程收到一个SIGINT信号，首先这个信号会保存在未决信号集中，此时SIGINT编号位置上置为1，表示处于未决状态；
		在这个信号需要被处理之前首先要在阻塞信号集中的SIGINT编号的位值上检查该值是否为1：
			a)如果为1，表示SIGINT信号被当前进程阻塞了，这个信号暂时不处理，所以未决信号集该位置上的值保持为1，表示该信号处于未决状态。
			b)如果为0，表示SIGINT信号没有被当前进程阻塞，这个信号需要被处理。内核会对SIGINT信号进行处理(执行默认动作，忽略或者执行用户自定义的信号处理函数)，
			  并将未决信号集中对应位值上的1变为0，表示该信号已经被处理了，这个时间非常短暂，用户感知不到
		当SIGINT信号从阻塞信号集中解除阻塞以后，该信号就会被处理
					
			内核
		+------------------------------------------------------------+	
		|      未决信号集                        阻塞信号集          |
                |   +----------------+                +----------------+     |
                |  1|                |               1|                |     |
                |   +----------------+                +----------------+     |
                |  2| SIGINT 1->0    |-------------> 2|    0           |     |
                |   | SIGINT 1       |                |    1           |     |
                |   +----------------+                +----------------+     |
                |  3|                |               3|                |     |
                |   +----------------+                +----------------+     |
                |   |                |                |                |     |
                |   +----------------+                +----------------+     |
                |   |                |                |                |     |
                |   +----------------+                +----------------+     |
                |   |                |                |                |     |
                |   +----------------+                +----------------+     |
                |   |                |                |                |     |
                |   +----------------+                +----------------+     |
                +------------------------------------------------------------|

		被阻塞期间如果产生多次信号，当阻塞解除以后，该信号只会被处理一次，多次发生的信号不会累积。

	4.2）信号集相关函数
		详见/c-pro/cProjects/linuxSignal项目

5、信号捕捉函数
	详见/c-pro/cProjects/linuxSignal项目

	








