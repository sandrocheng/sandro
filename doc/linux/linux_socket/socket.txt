1、什么是socket
	socket可以看成是用户进程与内核网络协议栈的编程接口。
	socket不仅可以用于本级的进程间通信，还可以用于网络上不同主机/系统的进程间通信，如图：1_TCPIP四层模型	
	
2、IPv4套接字地址结构
	Ipv4套接口地址结构通常也称为“网际套接字地址结构”，它以"sockaddr_in"命名，定义在头文件<netinet/in.h>中
	可以通过 man 7 ip 命令查看ip协议的手册
		struct sockaddr_in{
			//整个sockaddr_in结构的长度，在4.3BSD-Reno版本之前的第一个成员是sin_family
			uint8_t sin_len;
			//指定该地址家族，ipv4协议为AF_INET，
			//socket不仅可以用于ipv4协议还可以用于linux域协议，ipv6协议等，设置为AF_INET，说明此时使用IPv4协议
			sa_family_t sin_family;
			//端口
			in_port_t sin_port; //2个字节
			//IPv4的地址
			struct in_addr sin_addr;//4字节
			//暂时不用，一般将其设置为0
			char sin_zero[8];
		};
		
		/* Internet address. */
           	struct in_addr {
               		uint32_t       s_addr;     /* 实际上是一个无符号的32位整数，并且是一个网络字节序 address in network byte order */
           	};

	通用地址接结构用来指定套接字关联的地址，由于不同协议会有不一样的地方，因此会有一个通用的协议，sockaddr_in只适用于ipv4的地址结构，而sockaddr可以用于任何协议的套接口
		struct sockaddr{
			//整个sockaddr结构体的长度
			uint8_t sin_len;
			
			//指定该地址家族
			sa_family_t sin_family;

			由sin_family决定它的形式
			char sa_data[14]
		};

3、字节序
	-大端字节序(Big Endian)
	 最高有效位(MSB: Most Significant Bit)存储于最低内存地址处，最低有效位(LSB:Lowest Significant Bit)存储于最高内存字节处。
	-小端字节序(Little Endian)
	 最高有效位(MSB:Most Significant Bit) 存储于最高内存地址处，最低有效位(LSB: Lowest Significant Bit)存储于最低内存地址处。
	-如图 3_大端字节序和小端字节序	

	-主机字节序
	 不同的主机有不同的字节序，比如x86为小端字节序列，Motorola 6800为大端字节序，ARM字节序是可配置的。

	-网络字节序
	 网络字节序规定为大端字节序
	
	-当两个主机之间进行数据通信的时候，数据在发送端发送前，需要先把数据的字节序转换成网络字节序也就是大端字节序才能发送，数据到达目的主机后，需要把网络字节序转换成目的主机上的字节序。

	-字节序转换函数
	 man 3 htonl,查看详细文档
		#include <arpa/inet.h>
        	uint32_t htonl(uint32_t hostlong);//将4个字节的整数从主机字节序转换称为网络字节序
        	uint16_t htons(uint16_t hostshort);//将2个字节的整数从主机字节序转换称为网络字节序
        	uint32_t ntohl(uint32_t netlong);
        	uint16_t ntohs(uint16_t netshort);
	 上述的函数中，h代表host;n代表network s代表short,l代表long
	
	-查看当前系统使用的哪种字节序代码 ：c-pro/linuxProjects/linuxSocket/socketFun.c --> checkEdian函数


4、地址转换
	man 3 inet_aton ,查看详细文档
		#include <netinet/in.h>
        	#include <arpa/inet.h>
		//将地址字符串cp转换为网络字节序的地址(inp)
		int inet_aton(const char *cp, struct in_addr *inp);
		
		//将标准ip地址转换为32位整数：比如192.168.0.1转换为一个32位整数
		in_addr_t inet_addr(const char *cp);

		//将网络字节序地址转换为 标准ip地址字符串
		char *inet_ntoa(struct in_addr in);
	
	-代码 ：c-pro/linuxProjects/linuxSocket/socketFun.c --> addrRevert函数

5、套接字类型
	-流式套接字(SOCK_STREAM)	
	 提供面向连接的、可靠的数据传输服务，数据无差错，无重复的发送，且按发送顺序接收。
	 对应的是TCP协议
	
	-数据包式套接字(SOCK_DGRAM)
	 提供无连接服务。不提供无错保证，数据可能丢失或重复，并且接收顺序混乱。
	 
	-原始套接字(SOCK_RAM)
	 它提供一种能力，让我们直接跨于传输层，直接在IP层进行数据封装的套接字，通过原始套接字可以将应用层的数据直接封装成ip层能够认识的协议格式

6、c/s模型
	-TCP c/s模型 如图：6_TCPCS模型	
	
	-回射 C/S模型 如图：6_回射CS模型
	 回射 c/s模型是一种最简单的模型，数据通过输入输出流输入给客户端，客户端把数据通过网络发送给服务端，服务端收到后返回给客户端结果，客户端再把结果通过输入输出流返回

7、创建socket
	-创建socket用于通信，man 2 socket，查看手册
		#include <sys/types.h>          /* See NOTES */
       		#include <sys/socket.h>
		/**
		* domain:指定通信协议族(protocol family)
		* type:指定socket类型
		*      SOCK_STREAM：流式套接字
		*      SOCK_DGRAM：数据报套接字
		*      SOCK_RAW：原始套接字
		* protocol:协议类型,默认网络协议是tcpip的就用 0.
		*          The  protocol specifies a particular protocol to be used with the socket.  
		*          Normally only a single protocol exists to support a particular socket type within a given protocol family, in which case protocol can be specified as 0	
		* return : 非负数成功
                *          失败返回 -1
		*          它于文件描述符类似，我们把他称为套接字描述字
		*/	
       		int socket(int domain, int type, int protocol);
	
	-bind函数，用来绑定一个本地地址到套接字，man 2 bind查看手册
		
		#include <sys/types.h>          /* See NOTES */
       		#include <sys/socket.h>

		/**
		* sockfd:socket函数返回的套接字
		* addr:要绑定的地址,sockaddr是通用地址结构体，如果使用的是ipv4协议，可以使用sockaddr_in结构体，赋值会比较方便
		* addrlen:地址长度
		* return: 0，成功；-1，失败
		*/
       		int bind(int sockfd, const struct sockaddr *addr,socklen_t addrlen);

	-listen函数，监听socket是否有连接,监听成功以后socket才会从close状态转换成监听状态，之后才能够接受连接。
		listen函数调用成功以后，套接字sockfd就从主动套接字变成了被动套接字。
			主动套接字：用来发起连接的，可以调用connect来连接其他socket。
			被动套接字：用来接受连接的, 可以调用accpet等待其他socket来连接。
		一般来说，listen函数应该在调用socket和bind函数之后，调用函数accept之前调用
		对于给定的监听套接口，内核要维护两个队列：
			1.已由客户发出并到达服务器，服务器正在等待完成相应的TCP三次握手过程的连接队列，这些连接尚未完成，状态是SYN_RCVD。
		        2.已完成连接的队列。这些连接是ESTABLISHED状态
		这两个队列中的连接数之和不能大于backlog
		当连接close以后会从队列中移除。
		因此backlog实际上就是一个socket能够并发连接的最大套接字数。
		man 2 listen查看手册
		
		#include <sys/types.h>          /* See NOTES */
       		#include <sys/socket.h>
		/*
		* sockfd:socket返回的套接字
		* backlog:规定内核为次套接字排队的最大连接数,一般推荐SOMAXCONN作为参数
		* return: 0，成功；-1,失败
		*/
       		int listen(int sockfd, int backlog);

	-accept函数，从以完成连接队列中返回第一个连接，如果已完成连接队列为空则阻塞。
		man 2 accept，查看手册
			
		#include <sys/types.h>          /* See NOTES */
       		#include <sys/socket.h>
		/**
		* sockfd:服务器套接字
		* addr:将返回对等方的套接字地址
		* addrlen:返回对等方的套接字地址长度
		* 
		* return:成功，返回非负数文件描述符，可以使用read读取其中的数据了；失败返回-1
		*/
       		int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
	
	-connect函数，建立一个连接至addr所指定的套接字
		#include <sys/types.h>          /* See NOTES */
       		#include <sys/socket.h>
		/**
		* sockfd:套接字
		* addr: 要连接的套接字地址
		* addrlen:addr的长度
		* 
		* return:成功，返回0；失败返回-1
		*/
       		int connect(int sockfd, const struct sockaddr *addr,socklen_t addrlen);	

	-当连接建立后，可以通过netstat命令查看当前系统所有的连接和端口

	-代码 ：c-pro/linuxProjects/linuxSocket/socketFun.c --> createSocketServer ,创建一个回射服务器
		c-pro/linuxProjects/linuxSocket/socketFun.c --> createSocketClient ,创建一个回射客户端

	
8、REUSEADDR
	-服务器端尽可能使用REUSEADDR
	 在绑定之前尽可能调用setsockopt来设置REUSEADDR套接字选项。
	 使用REUSEADDR选项可以使得不必等待TIME_WAIT状态消失就可以重启服务器。否则重启服务器的时候，当前使用的Ip实际上是TIME_WAIT状态，此时绑定ip会失败。
	
	-setsockopt函数,使用man 2 setsockopt查看手册
		#include <sys/types.h>          /* See NOTES */
       		#include <sys/socket.h>

		/**
		* sockfd:套接字描述符
		* level:选项级别，一般设置为SOL_SOCKET
		* optname:每个level有不同的选项，REUSEADDR对应的是SO_REUSEADDR
		* optval:optname的值，SO_REUSEADDR设置为1的时候是开启
		* optlen:optval的长度
		*
		* return: 0,成功；-1，失败
		*/
       		int setsockopt(int sockfd, int level, int optname,const void *optval, socklen_t optlen);

	-代码 ：c-pro/linuxProjects/linuxSocket/socketFun.c --> createSocketServer 

9、服务端并发处理多客户端的连接
	c-pro/linuxProjects/linuxSocket/socketFun.c--> createSocketServer
	这个列子实际上只能处理一个客户端连接，并不合理，为了达到socket的并发效果，可以在服务端使用子进程的方式并发处理多个客户端的连接。
	代码：c-pro/linuxProjects/linuxSocket/multiClientServerByFork.c--> createMultiClientServerByFork

10、点对点聊天程序
	代码：c-pro/linuxProjects/linuxSocket/p2pChat.c

11、流协议与粘包
	-tcp是基于字节流的传输协议，只维护发送出去多少，确认了多少，没有维护消息与消息之间的边界。
	 相对于tcp，udp是基于消息的传输协议，它传输的是数据报，消息与消息之间是有边界的。
       
	-有边界，无边界反映在对方接收数据的时候处理是不一样的。
	 对于字节流来说，接收方不能保证一次操作能够返回多少个字节。
	 而对于有边界的协议包来说接收方每次都会一次接收一个数据包。
	
	-因此基于字节流的传输协议就会出现粘包问题，如图：11_粘包问题

	-粘包问题产生的原因，如图：11_粘包产生的原因。

	-粘包解决方案，本质上时要在应用层维护消息与消息的边界
		1、最简单的方式是定长包。c-pro/linuxProjects/linuxSocket/fixedMessage.c
		2、包尾加\r\n，比如ftp就是这么处理的。案例：c-pro/linuxProjects/linuxSocket/readline.c createReadlineClient
		3、包头加上包体长度。案例：c-pro/linuxProjects/linuxSocket/packetMsg.c
		4、更复杂的应用层协议比如google的 Protocol Buffers协议

12、recv函数
	-功能：和read函数一样，都可以从套接字描述符中把数据读到一个buffer中，但是recv只能用于套接口IO，不能用于文件IO以及其他IO，read函数是可以读取任意IO的。
	       recv比read多了一个flag参数，通过设置flag参数，可以指定接收的行为。
		#include <sys/types.h>
       		#include <sys/socket.h>
		
		/**
		*	
		* flags: 指定接收的行为
		*        MSG_OOB，传输层协议使用带外数据（out-of-band，OOB）来发送一些重要的数据，如果通信一方有重要的数据需要通知对方时，协议能够将这些数据快速地发送到对方。
		*	          为了发送这些数据，协议一般不使用与普通数据相同的通道，而是使用另外的通道。linux系统的套接字机制支持低层协议发送和接受带外数据。
		*                 但是TCP协议没有真正意义上的带外数据。为了发送重要协议，TCP提供了一种称为紧急模式（urgent mode）的机制。TCP协议在数据段中设置URG位，表示进入紧急模式。
		*                 接收方可以对紧急模式采取特殊的处理。很容易看出来，这种方式数据不容易被阻塞，并且可以通过在我们的服务器端程序里面捕捉SIGURG信号来及时接受数据。
		*        MSG_PEEK，可以接收缓冲区的数据，但是并不将数据从缓冲区清除。 
		*/
	 	ssize_t recv(int sockfd, void *buf, size_t len, int flags);
		
	-案例：c-pro/linuxProjects/linuxSocket/readline.c 使用recv配和MSG_PEEK参数实现readline功能。

13、getsockname函数
	-功能：获取socket的地址
		#include <sys/socket.h>
		/**
		* sockfd:套接字接口
		* addr : 返回的数据通过addr返回
		* 
	        * return : 0，成功；-1失败
		*/
       		int getsockname(int sockfd, struct sockaddr *addr, socklen_t *addrlen);

	-案例：c-pro/linuxProjects/linuxSocket/readline.c createReadlineClient

	-关联 int getpeername(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
	      在服务端accept后，客户端connect之后，虽然accept和connect也会返回对方ip和端口，但有的时候为了方便accept和connect的addr和addrlen参数会被设置为NULL，	
	      这个时候可以用getpeername根据sockfd重新获取对方的ip和端口号。

14、gethostname
	-功能：获取当前主机的名字,这个函数和socket连接没什么直接关系
		#include <unistd.h>
		
		/**
		* name:名称会返回到这个地址上
		* len:字符串长度
		*
		* return: 0,成功；-1,失败
		/*		
		int gethostname(char *name, size_t len);

	-案例：c-pro/linuxProjects/linuxSocket/readline.c createReadlineClient

		
15、gethostbyname
	-功能：根据主机名称获取ip地址
		#include <netdb.h>
		
		struct hostent *gethostbyname(const char *name);
           	
		struct hostent {
               		char  *h_name;            /* official name of host */
               		char **h_aliases;         /* alias list */
               		int    h_addrtype;        /* host address type */
               		int    h_length;          /* 这个是地址列表中每个地址占用多少个字节 */
               		char **h_addr_list;       /* list of addresses ，一般第一个地址就是默认地址*/
           	}

	-案例：c-pro/linuxProjects/linuxSocket/readline.c createReadlineClient

16、gethostbyaddr
	-功能：根据主机的ip获取主机信息和gethostbyname差不多
	       有效的地址类型为AF_INET和AF_INET6

		#include <sys/socket.h> 
		/**
		* addr:ip地址，需要使用in_addr结构体
		*      struct in_addr addr; 
		*      inet_pton(AF_INET,"127.0.0.1",&addr);//需要转换一下
		* len:addr的长度
		* type:AF_INET(ipv4)或AF_INET6(ipv6)
		*/
		struct hostent *gethostbyaddr(const void *addr,socklen_t len, int type);
	-案例：c-pro/linuxProjects/linuxSocket/readline.c createReadlineClient

17、僵尸进程与SIGCHLD信号
	使用子进程处理连接数据的时候，当子进程退出，而父进程没有使用使用wait或者waitpid完成对子进程的回收，此时会出现僵尸进程。直到主进程退出,这些僵尸进程才会被init进程回收掉
	可以使用信号来处理，当子进程退出的时候通知主进程回收资源。
	案例：c-pro/linuxProjects/linuxSocket/multiClientServerByFork.c--> createMultiClientServerByFork

18、TCP的11种状态
	-TCP状态，如图：18_TCP状态和socket接口对应关系	

	-启动案例中的服务
		netstat -an | grep tcp | grep [端口号]
	 观察服务启动后TCP会处与LISTEN状态
	 当客户端连接后，会看到对应端口的TCP会有两条记录，状态是ESTABLISH状态，有些状态持续时间会比较短，很难观察到。

	-TIME_WAIT状态
	 当一方close后，经过4次挥手，对方会先变成TIME_WAIT状态，此时内核会等待两倍的MSL时间，才会变成CLOSED状态。
	 在此期间，如果不使用REUSEADDR来设置socket再次启动会失败。

19、SIGPIPE信号
	-往一个已经接收到FIN的套接口中写是允许的，接收到FIN仅仅代表对方不再发送数据。
	-在write数据后，如果对方进程已经不存在，TCP会返回RST段。
	-在收到RST段后，如果在调用write就会产生SIGPIPE信号，收到这个信号，进程就会被关闭，对于这个信号的处理我们通常忽略即可
		signal(DIGPIPE,SIG_IGN);
	-SIGPIPE 信号是用于管道通信的，当往一个没有接收方的管道发送数据的时候就会产生SIGPIPE信号
	 TCP可以理解为是一个全双工的管道，因此也会触发这个信号。

20、五种I/O模型
	阻塞IO，如图：20_阻塞IO模型
	非阻塞IO ，如图：20_非阻塞IO模型
	IO复用(select和poll),如图：20_IO复用模型
	信号驱动IO,如图：20_信号驱动IO模型
	异步IO，如图：20_异步IO模型

21、select
	-功能：详见：doc/linux/linux多路复用/linux多路复用.txt 

		/* According to POSIX.1-2001, POSIX.1-2008 */
       		#include <sys/select.h>

       		/* According to earlier standards */
       		#include <sys/time.h>
       		#include <sys/types.h>
       		#include <unistd.h>
		
		/**
		* select会阻塞，直到有数据返回，或者超时
		*
		* nfds:3个监听集合的文件描述符最大值+1,比如往读集合中加入 1，15，16这三个描述符，其他的集合都设置为NULL，nfds就等于17
		* readfds:要监听的可读文件描述符集合，如果检测到数据可读，select就返回，设置NULL，表示不检测
		*	  套接口缓冲区有数据可读
		*	  连接的读被关闭，即接收到FIN段，读操作将返回0
		*	  如果是监听套接口，以完成连接队列不为空时。也就是说当socket调用listen之后，当有连接完成的时候，socketfd就会返回，后续可以通过accept获取到连接的套接口描述符
		*	  套接口上发生了一个错误等待处理，错误可以通过getsockopt指定SO_ERROR选项来获取
                *
		* writefds:要监听的可写文件描述符集合，设置NULL，表示不检测
		*	   套接口发送缓冲区有空间容纳数据,一般不会监听这个事件，因为写缓冲区大部分时候都是有空间的，如果监听，就会频繁触发监听返回。
		*	   连接的写被关闭。即收到RST段之后，再次调用write操作。
		*	   套接口上发生了一个错误等待处理，错误可以通过getsockopt指定SO_ERROR选项来获取
		*
		* exceptfds:要监听的异常文件描述符集合，设置NULL，表示不检测
		*           套接口存在外带数据
		*		
		* timeout:本次调用的超时时间 ，NULL，代表没有超时
		* 
		* return:大于0，就绪的文件描述符数; 等与0，超时;小于0，出错
		*/
		int select(int nfds, fd_set *readfds, fd_set *writefds,fd_set *exceptfds, struct timeval *timeout);

		/**
		* 将fd从集合中移除
		*/
        	void FD_CLR(int fd, fd_set *set);

		/**
		* 判断fd是否在集合中
		/*
        	int  FD_ISSET(int fd, fd_set *set);

		/**
		* 将fd添加到集合中
		*/
        	void FD_SET(int fd, fd_set *set);

		/*
		* 清空集合
		*/
        	void FD_ZERO(fd_set *set);

	-使用select的优点
	 在简单的回射模型中，服务端和客户端建立连接后，服务端退出，此时如果客户端在某个IO处阻塞住(比如输入输出IO)，没有执行close，就会来不及完成和服务端的4次挥手
	 由于无法完成四次挥手，此时服务端的TCP状态还处在FIN_WAIT_2状态，客户端处于CLOSE_WAIT状态，这样双方都不能正常完成TCP的关闭操作。	

	 使用select可以统一管理所有IO操作，当有IO变化的时候解除阻塞，逐个处理，这样能提升响应速度，最大程度减少延时，从而避免close不能及时执行的问题。

	-案例：c-pro/linuxProjects/linuxSocket/socketWithSelect.c

22、close和shutdown的区别
	-close终止了数据传送的两个方向。
	 比如 : A B两端建立socket连接后，A得到了socketA 套接字，B得到了socketB套接字。
		当A调用close(socketA)的时候，代表A即不能从socketA中获取数据，也不能通过SocketA发送数据。
		此时B会收到A的FIN段，说明A不会再给B发送数据，但是B还是可以通过socketB向A发送数据的，发送后，B会收到RST段，当B再次使用socketB发送数据的时候就会收到SIGPIPE信号。
		如果B没有监听或者忽略SIGPIPE信号，系统会杀死B进程。

	-shutdown可以有选择的终止某个方向的数据传送或者终止数据传送的两个方向。
	 如图：22_close和shutdown的区别

	-shutdown how=1就可以保证对等方接收到一个EOF字符，而不管其他进程是否已经打开了套接字。
	 而close不能保证，要等到套接字引用计数减为0时才发送，也就是说直到所有的进程都关闭了套接字才能保证关闭连接。

	 比如父进程得到了accetp返回的sockfd,然后fork子进程去处理这个sockfd。
	 如果父进程不close掉sockfd，只有子进程close，那么由于同一个套接字被两个进程使用，只关闭一个仅仅是将sockfd的引用计数器-1。
	 这个时候是不会发送FIN段给对等方的。因此这种情况是不能完成TCP的关闭流程的，	 

	-客户端使用shutdown来通知服务端，客户端任务已经完成，服务端发送最后的消息后，由服务端发起close，客户端read到EOF后再退出，这是相对比较完善的结束连接的机制。
	
	-shutdown函数
		#include <sys/socket.h>

       		/**
		* how :
		*     SHUT_RD (0),表示终止的是读
		*     SHUT_WR (1),表示终止的是写，此时对方会得到EOF字符	，对等方read会返回0
		*     SHUT_RDWR (2),表示即不能读，也不能写了，对方也会得到EOF字符，对等方read会返回0	
		*/
		int shutdown(int sockfd, int how);
	-案例：c-pro/linuxProjects/linuxSocket/caseShutdown.c

23、套接字超时设置
	-alarm:使用信号方是进行超时控制
	       在read之前设置linux的alarm，当收到系统的定时回调的时候，read函数会被打断，这个时候就可以判定超时，并继续执行了。
			...
			signal(SIGALARM,sigHandler);
			alarm(5);
			...
			if(ret ==-1 && errno == EINTR){
				errno = ETIMEDOUT;//设置错误码为超时
			}else if(ret >= 0) {
				alarm(0);//当有数据返回的时候，重置闹钟
			}
		这种方式会比较复杂，比如闹钟可能还用其他事情，需要区分闹钟回调时处于什么业务当中。
	       		
	-套接字选项 SO_SNDTIMEO,SO_RCVTIMEO
		int timeout = 5;
		setsockopt(socketfd, SOL_SOCKET, SO_RCVTIMEO, &timeout,sizeof(timeout));
		...
		int ret = read(sockfd,buf,sizeof(buf));
		if(ret ==-1 && errno == EWOULDBLOCK){
			//超时
			errno = ETIMEDOUT;
		}
	 这种方案，不是所有TCP的实现都支持，不是特别好。

	-select,使用select 的 timeout参数，监听各个操作超时情况。
		read_timeout函数封装
		write_timeout函数封装
		accept_timeout函数封装
		connetc_timeout函数封装:
			connect比较复杂，connect实际上是完成TCP连接的三次握手的过程，发起方发送SYN到应答返回的时间是1次往返时间，整个三次握手是1.5次的往返时间
			一次往返时间简称 RTT(Round-Trip Time),通常三次握手会很快完成，但是在广域网上常常会发生拥塞，connect默认最长会等待75秒的时间。	
		案例：c-pro/linuxProjects/linuxSocket/timeoutsocket.c

24、getrlimit和setrlimit函数
	-功能:查看/修改系统资源上限
	      需要注意的是，设置的值不能超过 rlim_max，通常由超级用户设置，并且在程序中不能修改。
	      在实际应用中，修改这个限制可能需要有 root 权限或者 CAP_SYS_RESOURCE 能力。如果没有这些权限，可能无法正常工作。 		
	      该函数只能修改当前进程的值。
		#include <sys/time.h>
       		#include <sys/resource.h>
		
		/**
		* resource:资源类型，具体可以参考man 2 getrlimit查卡
		*          RLIMIT_NOFILE,每个进程最多可以打开的文件描述符上限
		*	   在实际应用中，修改这个限制可能需要有 root 权限或者 CAP_SYS_RESOURCE 能力。如果没有这些权限，上述代码可能无法正常工作。 
		*
		*/
		int getrlimit(int resource, struct rlimit *rlim);
      		
		int setrlimit(int resource, const struct rlimit *rlim);

		struct rlimit {
               		rlim_t rlim_cur;  /* Soft limit ，当前值*/
               		rlim_t rlim_max;  /* Hard limit ( rlim_cur的上限) */
           	};

		resource:
			RLIMIT_AS/RLIMIT_VMEM: 这两个资源表示的是同一个含义，都是只address space限制，可用内存用户地址空间最大长度，会影响到sbrk和mmap函数。
			RLIMIT_STACK：栈的长度，默认一般是8K
			RLIMIT_CORE：程序crash后生成的core dump文件的大小，如果为0将不生成对应的core文件。
			RLIMIT_NOFILE：进程能够打开的最多文件数目，此限制会影响到sysconf的_SC_OPEN_MAX的返回值。
			RLIMIT_NPROC：每个用户ID能够拥有的最大子进程数目，此限制会影响到sysconf的_SC_CHILD_MAX的返回值。
			RLIMIT_NICE:对应进程的优先级nice值。
			RLIMIT_SWAP：进程能够消耗的最大swap空间。
			RLIMIT_CPU：CPU时间的最大值（秒单位），超过此限制后会发送SIGXCPU信号给进程。
			RLIMIT_DATA：数据段的最大长度。默认为unlimited
			RLIMIT_FSIZE：创建文件的最大字节长度。默认为ulimited
			RLIMIT_MSGQUEUE：为posix消息队列可分配的最大存储字节数
			RLIMIT_SIGPENDING：可排队的信号最大数量
			RLIMIT_NPTS：可同时打开的伪终端数目
			RLIMIT_RSS：最大可驻内存字节长度
			RLIMIT_SBSIZE：单个用户所有套接字缓冲区的最大长度
			RLIMIT_MEMLOCK：一个进程使用mlock能够锁定存储空间中的最大字节长度
	-案例：c-pro/linuxProjects/linuxSocket/socketFun.c -> resourceTest

25、poll函数
	-功能，和selet类似，但是没有select集合上限的限制
		#include <poll.h>
		
		/*
		* fds:监听的集合，通常是一个数组 
		* nfds:要检测IO的个数
		* timeout:超时事件，单位毫秒
		*         -1，代表没有超时，永远等待
		*	  0，会立刻返回，也不会有文件描述符准备好	
		* return : 大于0，成功
		*          等于0, 超时
		*          小于0，出错 ，错误码 errno
		*/
       		int poll(struct pollfd *fds, nfds_t nfds, int timeout);

           	struct pollfd {
               		int   fd;         /* file descriptor */
               		short events;     /* requested events */
               		short revents;    /* returned events */
           	};
	-event取值
       		POLLIN , 有数据到来，文件描述符可读
       		POLLPRI，有紧急数据可读，例如外带数据,和select中的异常集合相对应
       		POLLOUT，文件可写
       		POLLERR,错误发生
       		POLLHUP，关闭
       		POLLNVAL，非法请求
		POLLRDHUP，流式套接字半关闭，比如shutdown只关闭了读或写，或者close在TCP的4次挥手中，还没有完成的时候
       		POLLRDNORM，与POLLIN相同
       		POLLRDBAND，优先数据可读
       		POLLWRNORM，与POLLOUT相同
       		POLLWRBAND，优先数据可写
	-案例：c-pro/linuxProjects/linuxSocket/socketwithpoll.c		
 	

26、epoll的使用
	-功能：监听多个文件描述符事件。	
		
		#inclue <sys/epoll.h>
                /**
                * 创建epoll
                * size : epoll要监听的文件描述符数量，实际上epoll内部要创建一个hash表，这个size就是hash表的大小
		*        这个size并不能代表最大的并发限制，仅仅只代表hash表的大小。
                * return epoll的文件描述符，后面会根据这个文件描述符来操作epoll
                */
                int epoll_create(int size)
		
		/*
		* epoll_create1是比较新的函数，早期的epoll_create在创建前必须要指定size来创建内部的hash表，
		* epoll_create1内部已经不使用hash表了，而是红黑树，这个时候就不需要指定容量了
		*
		* flags:EPOLL_CLOEXEC,表示当进程被替换的时候，文件描述符会被关闭
		*       默认填0， 根epoll_create一样，但是不需要设置size了
		*
		* return epoll的文件描述符，后面会根据这个文件描述符来操作epoll
		*/
		int epoll_create1(int flags);


                /**
                * 操作epoll
                * epfd : epoll的文件描述符，epoll_create创建时返回
                * op : 操作类型：新增(EPOLL_CTL_ADD) 、删除(EPOLL_CTL_DEL)、更新(EPOLL_CTL_MOD)
                * fd : 本次要操作的文件描述符
                * epoll_event 需要监听的事件：读事件、写事件等
                * return : 0,调用成功; -1，调用失败
                */
                int epoll_ctl(int epfd,int op,int fd,struct epoll_event *event)

           	typedef union epoll_data {
               		void        *ptr;
               		int          fd;
               		uint32_t     u32;
               		uint64_t     u64;
           	} epoll_data_t;

           	struct epoll_event {
			/*
			* Epoll events
			* EPOLLIN,可读事件
			* EPOLLOUT，可写事件
			* ...
			* 要监听多个事件，使用或运算，如：event.events = EPOLLIN | EPOLLET; 监控读操作，并且使用ET模式
			*/
               		uint32_t     events;      
               		epoll_data_t data;        /* User data variable */
           	};


                /**
                *  获取就绪事件
                *  epfd : epoll的文件描述符，epoll_create创建时返回
                *  events : 用于回传就绪的事件
                *  maxevents : 每次能处理的最大事件数，比如监听100个文件，但是每次最多处理10个，此时maxevents就设置为10
                               在这种情况下，如果使用的是LT模式，下次会继续返回，直到所有事件都处理完，如果是ET模式，多余的事件由于是在就绪队列中，所以就会一直阻塞住再也无法触发
                *  timeout : 等待I/O事件发生的超时时间。-1:相当于阻塞;0:相当于非阻塞
                *  return : 大于0,已经就绪的文件描述符数; 等于0，超时; 小于0，出错
                */
                int epoll_wait(int epfd,struct epoll_event *events,int maxevents ,int timeout);

	-案例：c-pro/linuxProjects/linuxSocket/socketwithepoll.c
	
27、UDP
	-特点:
		无连接，udp协议内部并没有维护端到端的状态
		基于消息的数据传输服务
		不可靠，数据包可能丢失，重复，乱序。缺乏流量控制
		一般情况下，UDP更加高效

	-注意点：
		-UDP报文可能会丢失，重复
		-UDP报文可能会乱序
		-UDP缺乏流量控制，udp在发送的时候也有发送缓冲区，当缓冲区满了的时候，还是可以继续向缓冲区写入数据的，但是会覆盖掉老的数据。TCP使用了滑动窗口的算法保证了流量控制。
		-UDP协议数据报文截断,如果接收到数据包大小大于缓冲区的大小的时候，下一次接收并不会把剩下的数据读取回来，这些数据已经被丢弃
		 比如客户端发送4个字节的数据，服务端使用recvfrom的时候，每次只读取一个字节，当读完第一次后，再次使用recvfrom读取的时候就会阻塞了，直到下一次有新的UDP连接到达。
		 要想避免截数据的截断问题，发送数据的大小要小于接收端缓冲区的大小。
		-recvfrom返回0，不代表连接关闭，因为dup是无连接的，实际上发送端使用sendto的时候可以发送一个0字节的数据，这样接收方只会收到一个大概40字节的TCP基础包
		 这个时候recvfrom就会得到一个0字节的返回。
		-ICMP异步错误,
		 接收方无法根据recvfrom返回0得知发送方已经断开连接，这样会一直阻塞在recvfrom的位值
		 比如在recvfrom之前先调用sendto(对方已经close的情况下)，这个时候再调用recvfrom就会得到ICMP异步错误，但是根据TCPIP协议异步错误是无法返回给未连接的套接口的，因此recvfrom会一直阻塞。
		-UDP connect，在使用sendto之前，可以先connect，这样再次sendto的时候就不用填写对方的地址了，原因是在connect之后fd对应的对等方地址就已经绑定了
		-UDP外出接口的确定
		 假设客户端有两张网卡，一张地址是192.168.1.1另一张是192.168.2.1，
		 sendto的服务器，如果是192.168.1.xxx,客户端的外出接口就优先选择192.168.1.1
		 sendto的服务器，如果是192.168.2.xxx,客户端的外出接口就优先选择192.168.2.1
	-UDP CS 模型，如图：27_UDP的CS模型 
		
	-recvfrom
	 从套接子中读取UDP协议的数据
       		#include <sys/types.h>
       		#include <sys/socket.h>
		
		/**
		* buf:用于接收数据的数组
		* flags:udp默认使用0就可以，其他类型可以参考手册
		* src_addr,addrlen,指定对方的地址信息，成功返回后这两个值会被填写，不需要的话填 NULL
		* 
		* return : 失败返回-1；成功返回接收的数据大小
		*          
		*/
		ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,
                        struct sockaddr *src_addr, socklen_t *addrlen);

	-sendto,发送UDP数据，只是把数据拷贝到缓冲区中，并不知道是否已经把数据发送到了对方,如果对方已经close,sendto也不会返回错误
       		#include <sys/types.h>
       		#include <sys/socket.h>
		/**
		* buf:发送数据的数组
		* len:发送数据的大小
		* flags:udp默认使用0就可以，其他类型可以参考手册
		* src_addr,addrlen,指定对方的地址信息
		* 
		* return : 失败返回-1；成功返回发送的数据长度；
		*          
		*/

		ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,
                      const struct sockaddr *dest_addr, socklen_t addrlen);

	-案例：c-pro/linuxProjects/linuxSocket/udpsocket.c
	





