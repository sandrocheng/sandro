1、程序和进程
        程序，是指编译好的二进制文件，在磁盘上，占用磁盘空间，是一个静态的概念    
        进程，一个启动的程序，进程占用的是系统资源，如：物理内存，CPU，终端等，是一个动态的概念    
        同一个程序可以在多个终端执行，每启动一个程序都会有一个进程PID，即使相同的程序多次启动也会有不同的PID。 

2、并行和并发 
        并发，在一个时间段，同一个cpu上，同时运行多个程序
        如：若将cpu的1S的时间分成1000个时间片，每个进程执行完一个时间片必须无条件让出cpu的使用权，这样1s钟就可以执行1000个程序
        
        并行，是指两个或两个以上的程序在同一时刻/时间片发生（需要多个cpu或者多核cpu）

        cpu会将一个大的时间段分成多个小的时间片，让进程按规则轮流使用cpu时间片。

3、PCB进程控制块
        每个进程在内核中都有一个进程控制块(PCB)来维护进程相关的信息，linux内核的进程控制块是 task_struct结构体。
         
        /usr/src/linux-headers.../include/linux/sched.h文件中定义。其内部主要成员如下：
                进程id,系统中每个进程都有一个唯一的id，在c语言中用pid_t类型表示，是一个非负整数，一般_t后缀的都是typedef定义出来的。
                进程的状态，有就绪，运行，挂起，停止等状态
                进程切换时需要保存和恢复的一些cpu寄存器
                描述虚拟地址空间的信息
                描述控制终端的信息
                当前工作目录(Current Working Directory)
                        getcwd:pwd 获取当前目录
                        chdir，可以改变当前目录
                umask掩码。 
                文件描述符表，包含很多指向file结构体的指针
		和信号相关的信息
		用户id和组id
		会话(sessiion)和进程组
		进程可以使用的资源上限(Resource Limit)
			命令：ulimit -a

4、进程状态
	进程基本状态有5种，分别为初始态，就绪态，运行态，挂起态与终止态。其中初始态为进程的准备阶段，常与就绪态结合来看。


                                                                            +-------------+ 
                                                            获得cpu时间片   |             |        sleep
                                                    +---------------------->|   运行态    |--------------------+
                                                    |  +--cpu时间片用完-----|             |                    ||
                                                    | ||                    +-------------+                    ||
                                                    | ||                           ||                          ||
                                                    | ↓                            ||                          ↓ 
           +-------------+                   +-------------+                       ||     开始 sleep    +-------------+    
           |             |                   |             |                       ||   收到SIGSTOP信号 |             |
           |   初始态    |------------------>|   就绪态    |------------------------------------------->|   挂起态    |
           |             |                   |             |<-------------------------------------------|             |
           +-------------+                   +-------------+                       ||     sleep 结束    +-------------+
                                                    |                              ||                          |
                                                    |                              ||                          |  
                                                    |                              ||                          |
                                                    |                              ↓                           |
                                                    |                       +-------------+                    |
                                                    |                       |             |                    |
                                                    +---------------------->|   终止态    |<-------------------+
                                                                            |             |
                                                                            +-------------+
	
	就绪态进程，有执行资格，但是没有cpu时间片
	挂起态进程，既没有执行资格，也没有cpu时间片
	从挂起态不能直接回到运行态，必须回到就绪态
	只有就绪态才能回到运行态
        

5、创建进程
	5.1)fork函数
		详见/c-pro/cProjects/linuxProcess 项目

            父子进程全局变量共享：
		父子进程的全局变量的虚拟地址是一样的。
		如果父子进程只是对全局变量进行读操作，是可以共享的（在物理内存中是一个地址）
		如果父子进程对全局变量进行了写操作，则不能共享，写操作的进程会在物理内存中拷贝一份副本出来，在副本上进行修改，之后再重新映射到对应变量的虚拟地址上
		俗称：写时复制，读时共享，这种方式能比较大的节省内存。
   
























