1、gdb简介
	GDB(GNU Debugger)是GCC的调试工具。其功能强大，描述如下：
		GDB主要完成下面四个方面的功能：
		1)启动程序，可以按照用户的自定义要求随心所欲的运行程序
		2)可以让被调试的程序再指定的断点出停住（断点可以是条件表达式）
		3)当程序被停住时，可以检查此时程序所发生的事情
      		4)动态改变程序的执行环境
	
2、生成调试信息
	一般来说GDB主要调试的是c/c++的程序。要调试C/C++的程序，首先再编译时，需要把调试信息加到可执行文件中。使用编译器(cc/gcc/g++)的-g 参数可以做到这一点。
	如：
		gcc -g hello.c -o hello
		或者
		gcc -g -c hello.c    //生成ojbect文件，并加入调试信息
		gcc -o hello hello.o //使用有调试信息的object文件，生成可执行文件

	如果没有-g ，将看不见程序的函数名、变量名，所代替的全是运行时的内存地址。当用-g 把调试信息加入，并成功编译目标代码后。就可以使用gdb调试了。	

3、启动gdb	
	命令： gdb program
	program就是加入了调试信息的可执行文件

	设置运行参数
		set args 可指定运行时的参数。如: set args 1 2 3 4 5
		show args 命令可以查看设置好的运行参数。
	
	
	启动程序
		run 缩写r: 程序开始执行，如果有断点，停在第一个断点处，如果已经开始了，再次执行run,弹出是否重新执行提示，根据需要选择 y/n
		start : 程序向下执行一行。(在第一条语句处停止)

	退出程序
		quit 或者 q
4、显示源代码
	GDB可以打印处所调试程序的源代码，当然，在程序编译时一定要加上-g的参数，把源程序信息编译到执行文件中。不然就看不到源程序了。当程序停下来以后，GDB会报告程序停在哪个文件的第几行上
	可以使用list命令或者使用缩写l命令，来打印程序的源代码，默认打印10行。
		list: 显示当前位值上下10行,再次list 或者 回车就继续显示下面的代码
		list listnum : 打印第lintnum行的上下文内容,之后，一直按回车，就继续下翻代码
		list - : 打印上一页的代码,之后，继续回车或者list - ，就继续显示上页的代码
		list 函数名，打印当前停在的类函数的代码
			如：list main,打印main函数的代码
		list 文件名:n行，打印某个代码文件的第n行上下文
			如 list fun1.c:1
		list 文件名：函数名 打印某个代码文件的函数
			如：list fun1:fun1
	回车：执行上次执行过的命令
	一般是打印当前行的上5行和下5行，也可以指定显示的范围
		set listsize count : 设置一次显示代码源代码的行数
		show listsize : 查看当前listsize 设置

5、设置断点
	当前文件设置断点
		break 设置断点，可以简写b
			b 10 设置断点，在源程序第10行
			b func 设置断点，在func函数入口
	
	多文件设置断点
		在进入指定函数时停住
			b filename:linenum -- 在源文件filename 的 linenum 行处停住
			b filename:funciton -- 在源文件filename 的 funciton 函数处停住

	查看但前设置的断点
		info b 或者 i b

	设置断点无效disable 缩写 dis
		disable , 所有断点无效
		disable n,设置n号断点为无效，通过i b 可以查看当前断点信息，第一列(Num)就是编号
		disable n-m,设置n到m编号的断点无效
		disable n m o q... ,设置多个断点无效
		设置之后Enb列 对应的断点从y变成n，说明当前断点是无效的
		如：
			Num     Type           Disp Enb Address            What
			1       breakpoint     keep y   0x00000000000011e1 in main at main.c:16
			2       breakpoint     keep n   0x0000000000001169 in fun1 at fun1.c:3
			3       breakpoint     keep y   0x0000000000001180 in fun2 at fun2.c:3
			4       breakpoint     keep y   0x0000000000001197 in sum at sum.c:1
	设置断点有效enable 缩写 ena
		enable
		enable n
		enable n-m
		enable n m o q ...
		使用方法和disable一样	
	
	删除断点delete 或者 d
		delete ，删除所有断点
		delete num ，删除编号是num的断点
 		d n m o q... , 删除多个断点
		d n-m 删除n到m编号的断点
	
	条件断点：一般来说 为断点设置一个条件，使用if关键词，后面根其断点条件。设置一个条件断点
		b test.c:8 if intValue==5
		在test.c文件第8行，当intValue等于5的时候才有效
		
		b 16 if i==2
		在当前文件第16行，当i==2的时候才有效


6、调试代码
	run, 开始执行程序，可简写r
	next,单步跟踪，函数调用当作一条简单语句执行，可简写为n
	step,单步跟踪，函数调用进入到函数体内，可简写为s
	finish,退出进入的函数，如果初步去，看一下函数体中循环是否有断点，如果有删除或者disabel
	until，在一个循环体单步跟踪时，这个命令可以运行程序直到退出循环体，可简写为u,如果初步去和finish一样检查以下函数循环体中的断点
	continue 继续运行程序，可简写为c。(若有断点，则跳到下一个断点处)

6、查看变量内容 
         print 变量名、字符串、表达式等值 ，可简写为p
         如： print argc 打印变量
              print argv[0] ，打印数组中的值
	      print &i ,打印变量地址
	      print sum(1,1) ,打印当前行中某个函数返回值，如下:
			Breakpoint 1, main (argc=1, argv=0x7fffffffdec8) at main.c:21
			21		printf("12 + 13 = %d\n",sum(12,13) );//当前代码停在这里，这里有一个sum函数的调用	
			(gdb) print sum(1,1) //此时可以通过print调用以下这个函数并重新传参，并打印结果
			$1 = 2 // 输出结果
			(gdb) print sum(33,44)//再次更换参数重新执行
			$2 = 77// 输出第二次的结果

7、 display 自动显示变量的值
	可以设置一些自动显示的变量，当程序停住时，或者在单步跟踪时，这些变量会自动显示
		display 变量名
		info display -- 查看当前设置过的display信息

		undisplay num，num是info display 中的编号信息，让num编号的display失效
		enalbe display num ，把undisplay的信息生效

		delete display dnums 删除display信息
			delete display n1 n2
			delete display n-m
			delete display : 删除所有display
	

8、查看修改变量的值
	ptype width -- 查看变量width的类型
		如：
		15		for(int i = 0;i<argc ;i++){
		(gdb) ptype i //查看当前行i的类型
		type = int //类型返回int


	查看变量内容
		print 变量名、字符串、表达式等值 ，可简写为p
           		如： print argc 打印变量
               	             print argv[0] ，打印数组中的值
                             p &i ,打印变量地址
                             p sum(1,1) ,打印当前行中某个函数返回值，如下:
                         		Breakpoint 1, main (argc=1, argv=0x7fffffffdec8) at main.c:21
                         		21              printf("12 + 13 = %d\n",sum(12,13) );//当前代码停在这里，这里有一个sum函数的调用
                         		(gdb) print sum(1,1) //此时可以通过print调用以下这个函数并重新传参，并打印结果
                         		$1 = 2 // 输出结果
                         		(gdb) print sum(33,44)//再次更换参数重新执行
                         		$2 = 77// 输出第二次的结果

	设置变量内容,运行时刻，可以改变某个变量值，从而影响程序结果
		set var 变量名=xxx
		如：
			Breakpoint 4, main (argc=6, argv=0x7fffffffde98) at main.c:16
			16			printf("argv[%d] is %s \n",i,argv[i]);
			(gdb) p i
			$6 = 0
			(gdb) p argv[i] //通过p命令查看当前argv[i]是程序名和全路径
			$7 = 0x7fffffffe203 "/home/sandro/mywork/gitwork/sandro/c-pro/gdbTest/main"
			(gdb) set argv[i]="hello"//此时修改这个变量的内容
			(gdb) c
			Continuing.
			argv[0] is hello //等到输出时，变量的值已经变成修改后的值了

			Breakpoint 4, main (argc=6, argv=0x7fffffffde98) at main.c:16
			16			printf("argv[%d] is %s \n",i,argv[i]);
			(gdb) 
      			 	
