1、linux网络服务器
	-web服务器
	-邮件服务器
	-数据库服务器
	-FTP服务器
	-游戏服务器
	-...
	都是基于TCP/IP或UDP网络协议的服务器
	
2、linux多路复用介绍
	-相对与多路复用，比较简单的是单一客户tcp模型，也就是服务器每次都只会服务于一个客户端链接，其他客户端链接如果想要被服务，必须要等待当前客户端与服务断开才可以
	 单一客户tcp模型在处理并发问题的常规操作是，创建多个线程/进程，每个线程只负责一个客户端的链接，没有客户端连接的线程处于空闲状态，服务器根据linux线程抢占去并发服务于各个客户端
	 这种方式有一定资源浪费的情况，即使是空闲的线程依然会占有系统的开销

	-多路复用可以实现一个线程/进程连接多个客户端，也就是说一个线程/进程可以监听多个文件描述符(每个文件描述符可以理解为一个连接)，从而提高线程的利用率，以减少开销
	 多路复用可以使用以下3中手段实现：
		select:posix标准，很早实现的模型，几乎所有系统都支持select模型,如图：linux多路复用_2_select原理
		       -select扫描关注表的方式是轮询扫描，而关注表最大只能关注1024个文件描述符，由于进程打开的时候linux默认0 1 2这三个文件描述符是标准输入、输出、错误通道，实际上能用的不到1021个
		        对于大型服务器来说监听1000多个连接还是太少了。即便如此相对于单一客户tcp模型并发处理时要开辟1000个线程/进程监听连接，还是要节省了很多的开销
		       -关注表的持续扫描相对比较占用cpu	
		       -select另外一个缺陷是进程向客户端接收/发送数据的时候，需要通过内核，因此会涉及到用户进程空间和linux内核空间之间的数据拷贝，导致效率较低，内存占用也比较大
		       -select 事件复杂度 O(n)
		       -同步的IO
		Poll：93年首次上线,poll相对与select只是把关注表的限制取消了，原理和执行效率上和select差不多，也不是特别理想
		      poll的事件复杂度 O(n)
		      同步的IO
		epoll ：2000年后上线的多路复用解决方案，是linux中高并发效率比较高的模型，少数操作系统支持，比如linux，windows就不支持
			epoll极大的优化了select和poll再效率和内存上的缺陷，它的时间复杂度实际上是O(1),它不会随着连接数增大而增大
			异步的IO
3、Epoll介绍
	-Epoll的提出，
		-它所支持的文件描述符上限是整个系统最大可以打开的文件数目
		 例如，再1GB内存的机器上，这个限制大概是10万左右
		-每个fd上面有callback函数。只有活跃的socket才会主动去调用callback函数，其他idel状态socket则不会，它实际上采用的是通知机制，而不是select那种轮询的机制，因此效率更高
	 	-通过内核与用户空间mmap共享内存，避免了二者之间的数据拷贝
