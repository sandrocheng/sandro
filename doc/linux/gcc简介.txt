1、gcc的工作流程
	gcc编译器将c源文件生成一个可执行程序，中间一共经历了四个步骤
		hello.c ---{预处理(cpp)gcc-E} ---> hello.i(c文件) ---{编译器(gcc) gcc-S}---> hello.s(汇编文件)---{汇编器(as) gcc-c} --->hello.o(二进制文件)---{链接器(ld) gcc}--->a.out(可执行文件)

	这4个步骤并不是gcc独立完成的，而是在内部调用了其他工具，从而文成了整个工作流程，其中编译最耗时，因为要检查语法。
		预处理：使用cpp预处理器进行宏替换，注释删除，头文件检查和展开
			命令：gcc -E main.c -o main.i , 对main.cxx文件执行预处理并保存为main.i预处理文件，预处理文件本质上也是c/c++文件,可以查看
	 	编译：这个阶段编译器主要做词法分析、语法分析、语义分析等，在检查无错误后后，把代码翻译成汇编语言。
		      编译器(ccl)将文本文件main.i 翻译成文本文件main.s, 它包含一个汇编语言程序。汇编语言程序中的每条语句都以一种标准的文本格式描述了一条低级机器语言指令。
			命令：gcc -S main.i -o main.s ,生成汇编语言文件main.s
		汇编：把编译阶段生成的.s文件转换为二进制目标代码。汇编器(as)将main.s翻译成机器语言指令，把这些指令打包成可重定位目标程序的格式，并将结果保存在目标文件main.o中。
		      main.o文件是一个二进制文件，它的字节编码是机器语言。
			命令：gcc -c main.s -o main.o
		链接：obj文件链接为可执行的文件,由链接器(ld)负责.o文件的并入,作用是链接main.c代码中调用的库函数。结果就是main文件，它是一个可执行的目标文件，可以加载到存储器后由系统调用。
			命令：gcc main.o -o main,，链接成功以后，生成可执行文件，在linux下通过命令：./main 执行程序
		
	实际工作中，不需要这4步分别执行，可以直接生成可执行文件，由gcc自己分别执行以上四个步骤
		命令:gcc -o main main.c
	
2、gcc 常用参数
	-v 查看gcc版本好，--version也可以
	-E 生成预处理文件
 	-S 生成汇编文件
	-c 只编译，生成.o文件，通常称为目标文件
	-I 指定头文件所在路径
     	-L 指定库文件所在路径
	-l 指定库的名字
        -o 指定生成的目标文件的名字
	-g 包含调试信息，使用gdb调试需要添加-g参数
	-On n=0~3,编译优化，n越大优化越多
		例如：
			int a = 10;
		   	int b = a;
			int c = b;
			printf("c=%d",c);
		上边的代码会优化成：
			int c = 10;
			printf("c=%d",c);
	-Wall 提示更多警告信息
		例如：
			int a;
			int b;
			int c=10;
			printf("[%d]\n",c);
		编译如下：
			gcc -o main -Wall main.c
		这时候会有警告：
			wmain.c: In function ‘main’:
			main.c:12:6: warning: unused variable ‘x’ [-Wunused-variable]
			   12 |  int x = 10;
			      |      ^
		
	-D 编译时定义宏
		test.c 文件中的代码片段
			printf("MAX==[%d]\n",MAX);
			printf(PRINTSTR);
		编译：gcc -o ./bin/main  main.c -D MAX=10 -D PRINTSTR='"abcc"'
		注意 ： 如果传递的内容是字符串，则需要在字符串的字面值两边加上单引号。


3、g++
	g++ 指令编译 C++ 代码
	编译流程和参数 和 gcc一样

4、g++ 和 gcc区别
	实际使用中我们更习惯使用 gcc 指令编译 C 语言程序，用 g++ 指令编译 C++ 代码。
	需要强调的一点是，这并不是 gcc 和 g++ 的区别，gcc 指令也可以用来编译 C++ 程序，同样 g++ 指令也可以用于编译 C 语言程序。

	只要是 GCC 支持编译的程序代码，都可以使用 gcc 命令完成编译。可以这样理解，gcc 是 GCC 编译器的通用编译指令，因为根据程序文件的后缀名，gcc 指令可以自行判断出当前程序所用编程语言的类别，

	比如：
    		xxx.c：默认以编译 C 语言程序的方式编译此文件；
    		xxx.cpp：默认以编译 C++ 程序的方式编译此文件。
    		xxx.m：默认以编译 Objective-C 程序的方式编译此文件；
    		xxx.go：默认以编译 Go 语言程序的方式编译此文件；
 
	但如果使用 g++ 指令，则无论目标文件的后缀名是什么，该指令都一律按照编译 C++ 代码的方式编译该文件。
	如果用g++编译c语言源文件，严格来说，C++ 标准和 C 语言标准的语法要求是有区别的。可能会出现编译失败的情况。

	如果想使用 gcc 指令来编译执行 C++ 程序，需要在使用 gcc 指令时，手动为其添加 -lstdc++ -shared-libgcc 选项，表示 gcc 在编译 C++ 程序时可以链接必要的 C++ 标准库。
	也就是说，我们可以这样编译 demo.cpp 文件：
		gcc -xc++ demo.cpp -lstdc++ -shared-libgcc 
	



	
				
