一、常用文件和目录操作
1.1、 tree 命令
	需要安装：sudo apt-get install tree
	以树状形式查看指定目录内容
	命令使用方法
		tree -- 树形结构显示当前目录下的文件信息
		tree 目录 -- 树形结构显示指定目录下的文件信息
	tree命令智能查看目录内容，不能查看文件

1.2 、 ls命令
	查看指定目录下的文件信息
	使用方法：
		ls ：显示当前目录下的文件信息
		ls 目录或文件名 ：显示指定目录下文件信息		
	相关参数
		没有参数，按照文件名排序
		-a :列出当前目录下的所有文件
			. 当前目录
			..当前目录的上一级目录
			隐藏文件，以.开头的文件名(目录)，如：.git（git隐藏目录），.gitignore(git配置文件)
			普通文件
		-R : 递归方式列出所有目录的内容
		-l : 列出文件的详细信息，7部分内容
			-rw-rw-r-- 1 sandro sandro    5320 12月 27 21:31  linux基础知识.txt
			第一列 "-rw-rw-r--"的10个字符，含义如下：
				第1个字符： 文件类型（共7种）		
					- ：普通文件
					d ：目录
					l : 符号链接，相当于windows的快捷方式
					s : 套接字,socket文件
					p : 管道
					b : 块设备
					c : 字符设备
				2~10个字符 : 用户的操作权限:r(读)，w(写)，x(执行)，-（没有该权限）
					2,3,4 字符：文件所有者对文件的操作权限	
					5,6,7 字符：文件所属组的同组用户对文件的操作权限
					8,9,10:其他人对文件的操作权限
			第二列：是一个数字。
				对于目录来说，代表这个目录下有几个目录（包括 . 和  .. ,所以至少是2）
				对于普通文件来说，代表硬链接数
			第三列：文件/目录所属的用户
			第四列：文件/目录所属的组
			第五列：文件大小，单位：字节，目录是4k，不包含目录里面所有文件大小
			第六列：文件的最后修改时间，如果没有修改过，就是创建时间。
			第七列：文件名
		-r : 逆向排序，没有其他参数的情况下，按文件名逆向排序，组合使用的时候按前一个参数逆向排序	
		-t ： 按时间（从大到小）排序
		-tr ： 按照时间(-t)逆向(-r)（从小到大）排序
		-i : 查看文件inode节点编号，例如 ls -i 文件名
			
	参数之间可以结合使用
		如：ls -al ，相当于 -a 和 -l两个参数，列出当前目录下所有文件的相关信息(-l)包括隐藏文件（-a）
		如：ls -ltr,列出当前目录下的文件，按照时间逆向（从小到大）排序		


1.3、cd 命令
	切换目录（change directory）,命令使用方式： cd + 路径
	路径可以是绝对路径也可以是相对路径
		cd /home/sandro ，绝对路径（从根目录开始）
		cd ./sandro/mywork ,相对路径（从当前工作目录开始，./可以省略）
	切换到家目录（例如: /home/sandro）
		cd
		cd~
		cd /home/sandro
		cd $HOME
	临近两个目录直接切换
		cd -	
		例如 先执行 cd /home/sandro/mywork ,然后又执行cd /home/sandro/tools ,此时用 cd - ，可以立即回到 /home/sandro/mywork中去

1.4、pwd命令
	查看用户但前所处的工作目录，printf working directory

1.5、which命令
	显示命令所在的目录 如： which ls、which tree 等	

1.6、touch命令
	如果文件不存，创建一个新文件，如果文件存在，更新文件的最后修改时间
	命令使用方式 : touch 文件名

1.7、mkdir命令
	创建新目录，make directory
	创建方式：mkdir 目录名,如果创建多级目录需要添加参数 -p
	例：
		在当前目录下创建目录: mkdir mydir
		在宿主下创建多级目录： mkdir -p ~/test/hello/world/aa
1.8、rmdir命令
	删除空目录，只能删除空目录，使用方式：rmdir 目录名

1.9、rm命令
	删除文件：rm 文件名
	删除目录：rm -r 目录名
	参数：
		-r:递归删除目录，删除目录必须添加此参数
		-i:提示用户是否删除文件或者目录
		-f:强制删除
	rm -rf 强制删除目录及目录下所有文件和目录		
	注意：使用rm命令删除的文件或者目录不会放入回收站中，数据不易恢复

1.10、cp命令 
	文件或目录copy命令
	命令使用方式 : cp 源目录或文件 目标目录或文件
	若有目录的拷贝需要使用 -r 参数
	例如 ： cp file1 file2(file2文件不存在)  正常复制一个新文件。 	
	      cp file1 file2(file2文件存在)  复制一个新文件覆盖到老文件（file2）
	      cp file1 目录名  : 拷贝file1到目录名下， 此时目录必须存在。
	      cp -r 目录名1 目录名2(不存在)：复制目录1所有文件并命名为目录名2 
	      cp -r 目录名1 目录名2(存在)：把目录1拷贝到目录2下，如果目录2下已经有一个目录叫目录1，该目录会被新的目录1覆盖
	      cp -a file1 file2 : 把file1的文件信息/属性也拷贝到file2中

1.11、mv命令
	mv 源文件 目标文件:转移文件
	mv file1 file2（不存在）：此时相当于文件改名 	
	mv file1 file2（存在）：覆盖  
	mv file dir(dir 必须存在) ：把文件移动到目录下
	mv dir1 dir2(不存在) ： 相当于目录改名
	mv dir1 dir2(存在)：dir1目录移动到dir2目录下
	
1.12、cat命令
	将文件内容一次性输出到终端
	使用方式： cat 文件名
	缺点：终端显示内容有限，如果文件太长无法全部显示
	可用于文件重定向 cat file1>file2 ，相当于cp file1 file2
	
1.13、more命令
	文件内容分页显示到终端，但是只能一直向下浏览(回车一行，空格一页，q/ctrl+c 退出)，不能会退
	使用方式: more + 文件名

1.14、less 命令
	文件内容分页显示到终端，可以自由上下浏览
	使用方式 ：less + 文件名
	相关操作
		显示下一行：回车、ctrl + p 、方向键下
		显示上一行：ctrl + n 、方向键上
		显示下一页：空格、PageDown
		显示上一页：PageUp
		退出 : q

1.15、head命令
	从文件头部开始查看前n行的内容
	使用方式 ： head -n[行数] 文件名
		head -20 hello.text
	如果没有指定行数，默认显示前10行内容				
			 							
1.16 、tail命令
	从文件尾部向上查看最后n行的内容
	使用方式：tail -n[行数] 文件名
	如果没有指定行数，默认显示最后10行内容					 			
	一个比较重要的应用，显示日志 ： tail -f test.log,
		一个终端tail -f test.log ,此时当前终端会阻塞在这里，等待文件有新内容增加
		当另一个终端向这个文件插入内容时，比如 echo "hello world">>test.log
		此时原来阻塞的终端会实时显示 

1.17、软链接
	类似于windows中的快捷方式
	创建软链接
		ln -s 源文件 快捷方式的名字，例如：ln -s aa aa.soft
		目录也可以创建软链接， 例如 ln -s dir dir.link
	注意：
		创软链接的时候源文件要使用绝对路径，如果创建软链接的时候使用的源文件路径是相对路径，软链接一旦更换目录，会失效。
		源文件更换目录，软链接失效
		软链接的大小是：路径+文件名的总字节数
		
1.18、硬链接
	ln 文件名 硬链接的名字
	例：ln test.log test.log.hard
	
	注意：
		硬链接不能建立在目录上
		硬链接对绝对路径没有要求
		硬链接不能跨文件系统
			硬链接文件和源文件的inode是相同的，文件系统的inode要求为一跨文件系统可能会使inode不同，所以硬链接不能跨文件系统
			
	硬链接的本质
		硬链接的本质是不同的文件名所在的inode节点是相同的，相同的inode节点指向了相同的数据块，所以他们的文件内容是一样的，文件内容会同步。
			ls -i 文件名 ，可以查看文件的i节点
			stat 文件名 ，可以查看i节点信息
		硬链接和源文件指向的是linux中相同的inode节点，每个inode节点都对应一个数据块（文件内容）
			当创建了一个文件，硬链接计数为1
			给文件创建了一个硬链接后，硬链接计数+1
			删除一个硬链接，硬链接计数 -1
	作用：
		可以起到共享，同步文件的作用
		可以起到保护文件的作用（删除一个硬链接，只要计数不为0，不会真正删除）

1.19、wc 命令
	显示文件行数，字节数，单词数
		wc -l file : 显示文件的总行数
		wc -c file : 显示文件的总字节数
		wc -w file : 显示文件的总单词数
		wc file : 显示文件行数，字节数，单词数		

1.20、whoami
	显示当前登陆的用户名
	echo $USER ，使用环境变量USER也可以查看当前登陆的用户名		

1.21、chmod 修改文件权限	
	linux是通过权限对文件进行控制的，通过使用chmod命令可以修改文件相关权限
	文字设定法：
		命令：chmod[who][+|-|=][mode] 文件名
			操作对象 [who]
				u ,用户(user),文件的所有者
				g ,同组用户（group）
				o ,其他用户
				a--所有用户(all)
			操作符 【+-=】
				+ ,添加权限
				- ,取消权限
				= ,赋予给定权限并取消其他权限
			权限[mode]
				r ,读
				w ,写
				x ,执行
		示例：chmod ug+wr file.txt (给文件file.txt的所有者和所属组添加读写权限)
		      chmod go=r a.log (让组用户和其他用户只能读 a.log文件) 	
		      chmod g+w,o+w a.log(给组用户和其他用户赋予a.log的写权限)
		      chmod -w a.log(给所有者和所属组用户取消写权限)
		      chmod a-w a.log(给所有人取消写权限)
			
	数字设定法：
		命令：chmod[+|-|=][mode] 文件名
			操作符[+-=]
				+ ,添加权限
				- ,取消权限
				= ,赋予给定权限并取消其他权限
			数字表示的含义
				0 ，没有权限
				1 ,执行权限（x）
				2 ,写权限(w)
				4 ,读权限
		示例: chmod 664 file.txt ,给file.txt文件设置 rw-rw-r--
		      chmod -022 a.log ,去掉同组人和其他人的写权限
		注意：使用数字设定法，一定药用三位的8进制数，如：066

1.22、chown ,修改文件所有者和所属组
	修改文件所有者	
		用法：chown 文件所有者 文件名
			示例：sudo shown mytest file.txt
	
	修改文件所有者和所属组
		用法：chown 文件所有者:文件所属组 文件名
			实例：sudo chown sandro:sandro file.txt
			      sudo chown sandro.sandro file.txt  (.和:都可以)
			      sudo chown :root file.txt 只改组名，文件所有者不变
		注意:普通用户需要使用管理员用户权限执行该命令
	
	若系统没有其他用户，可以使用sudo adduser 用户名 创建一个新用户

1.23、chgrp, 修改文件所属组
	使用方法：chgrp 用户组 文件或目录名
		示例：修改文件所属组为mytest
			sudo chgrp mytest file.txt
	普通用户需要使用管理员权限执行该命令
	
1.24 、find 
	按文件名查询			 			      						
		命令：find 路径 -name 文件名
		示例：find ~/home -name "*.c"	
		      find ./  -name "*.c" -o -name "*.cpp" ,查找当前目录下所有.c和.cpp文件，多个文件名查找，用“-o”连接
	
	按文件类型查询
		命令: find 路径 -type 类型
		类型：
			f : 普通文件类型
			d : 目录
			l : 符号链接
			b : 块设备文件
			c : 字符设备文件
			s : socket文件		
			p : 管道文件
		示例：find 路径 -type f ，查找指定路径目录下的普通文件
		      find ./ -type d -name "doc" ,查找当前目录下名字是doc的目录	
		
	按文件大小查询
		命令 ： find 路径 -size 范围
		范围：
			+,大于，例：+100k ,大于100k
			-,小于，例：-100k ，小于100k
			默认,等于，例：100k ,等于100k
		大小：
			M:必须大写（10M）
			k:必须小写（100k）			
			c:表示字节数
		示例：
			find ~/ -size 100k,查找家目录下等于100k的文件
			find ~/ -size -50k,查找家目录下小于 50k的文件
			find ~/ -size -100k -size +50k,查找家目录下大于50k<100k的文件

	按文件日期
		-ctime -n/+n，创建日期
		-mtime -n/+n,修改日期
		-atime -n/+n访问日期	
		-n:n天以内
		+n:n天以外
		
		示例 find ./ -mtime -3 -name "*.cpp" 查找当前目录下名字是*.cpp 3天之内修改过的文件
	按深度
		-maxdepth n(层数):搜索n层以下的目录，搜索的层数不超过n层
		-mindepth n(层数):搜索n层以上的目录，凑锁的层数不能小于n层
	高级查找
		查找指定目录下所有目录并列出文件详细信息
		语句：find./ -type d -exec shell命令  {} \; 一次型输出所有内容
			例：find ./ -type d -exec ls -l {} \;
		语句：find ./ -type d -ok shell命令 {} \; 按目录输出，每更换一个目录会提示，输入y 再继续输出
			例：find ./ -type d -ok ls -l {} \;	
		
		查找目录下大于400k的文件，并显示文件信息
		find ./ -size +400k -exec ls -l {} \;	
			
		注意 ：
			“{}”中间不能有空格 
			“{}” 和 “\;” 中间有空格
			“ok” 比较安全 ，特别是再执行rm 删除文件的时候
			“{}” 是成前面find的一个结果集，“\;” 实际上是";" 的转义，然后对结果集的每个结果使用具体的 shell命令
		
		语句：find ./ -type d | xargs shell命令, 一次型输出所有内容
			例：find ./ -type d | xargs ls -l	
		
		注意：如果查询结果可能比较大推荐用xargs，分段查找展示。exec是先把结果放到缓存里，然后一起输出，如果结果集很大，不利于查看，也有可能缓存被用光导致失败	
			
1.25、 | 管道符
	“|”是管道符，左边代表输入，右边代表输出
	例如 ：find ./ -type d | xargs ls -l
	左边是查找出来的结果，作为写端。右边的xargs命令是读端，此时读的是左边写端的find结果集。

1.26、grep命令
	文件内容查找
	命令 ： grep -r(有目录) "查找的内容" 搜索的路径
		-r ,若是目录，则可以递归搜索
		-n ,可以显示该查找内容所在的行号
		-i ,参数可以忽略大小写进行查找
		-v ,不显示含有某字符串
	
	案例：
		grep -r -n "hello world" ./  查找在当前目录下（包含所有子目录）包含“hello world”字符串的文件，并显示行号		
		grep -r -i -n "hello world" ./  查找在当前目录下（包含所有子目录）包含“hello world”字符串的文件，忽略大小写并显示行号		

1.27、find 和 grep 联合使用
	查找当前目录下cxx文件中含有“hello world”的文件，忽略大小写，并显示行号，先使用find命令查找文件，然后用grep命令检索文件内容
	find ./ -name "*.cxx" |xargs grep -r -n -i "hello world"						

1.28、>和>>
	>和>>其实都属于输出重定向，都可以输出内容到指定文件。
	>会覆盖目标的原有内容，当文件存在时，会先删除原文件，再重新创建文件，然后把内容写入该文件，否则直接创建文件。
	>>会在目标原有内容后追加内容，当文件存在时直接在文件末尾进行内容追加，不会删除原文件，否则直接创建文件。
	示例
		echo "hello" >> log ,在log中追加“hello”
		ls -l > log ,删除并创见新的文件保存 ls -l的结果
1.29、man 
	Linux中的man手册就是提供给用户在有不明白的命令或者函数的时候，去查询它的功能、使用方法、头文件以及所需参数的帮助手册。
	其中我们常用前3个手册，第1手册中是用来存放可执行程序和shell命令的；第2个手册用来存放系统调用函数的，这些函数由内核提供；第3个手册是用来存放库调用函数的，这些函数由第三方库来提供。
	下表显示了手册的 章节 号及其包含的手册页类型。
	手册类型：
       	1   可执行程序或 shell 命令
       	2   系统调用(内核提供的函数)
       	3   库调用(程序库中的函数)
       	4   特殊文件(通常位于 /dev)
       	5   File formats and conventions, e.g. /etc/passwd
       	6   游戏
       	7   杂项(包括宏包和规范，如 man(7)，groff(7))
       	8   系统管理命令(通常只针对 root 用户)
       	9   内核例程 [非标准]

	区分要查的函数是属于系统调用还是库函数
		man -k 名称
		例子 man -k printf
	printf 手册3和手册1都有，根据需要查看不同手册
		man 1 printf , 查看手册1中的printf	
	查看man手册使用方法：
		命令：man man
	查看 ls 命令使用方法
		命令 : man ls	

二、进程相关命令
2.1 ps
	ps -ef | grep "xxx"
	ps aux | grep "xxx"
	ps ajx | grep "xxx"
		-a : 当前系统所有用户进程
		-u : 查看进程所有者以及其他一些信息
		-x : 显示没有控制终端的进程，不能与用户进行交互的进程【输入，输出】,如下 tty列是?的 都是没有控制终端的进程
			   PPID     PID    PGID     SID TTY        TPGID STAT   UID   TIME COMMAND
                              0       1       1       1 ?             -1 Ss       0   0:03 /sbin/init splash
                              0       2       0       0 ?             -1 S        0   0:00 [kthreadd]
                              2       3       0       0 ?             -1 I<       0   0:00 [rcu_gp]
                              2       4       0       0 ?             -1 I<       0   0:00 [rcu_par_gp]

		-j : 列出与作业控制相关的信息
	例子：
		$ ps aux
		USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
		root           1  0.0  0.1 168460 11480 ?        Ss   1月11   0:03 /sbin/init splash
		root           2  0.0  0.0      0     0 ?        S    1月11   0:00 [kthreadd]
		root           3  0.0  0.0      0     0 ?        I<   1月11   0:00 [rcu_gp]
	VSZ : 进程的虚拟内存大小，单位为KiB
	RSS : 任务已使用的非交换物理内存（KB）或者驻留集(resident set)的大小
		Resident Set 当一个进程在运行的时候,操作系统不会一次性加载进程的所有数据到内存,只会加载一部分正在用,以及预期要用的数据。其他数据可能存储在虚拟内存,交换区和硬盘文件
	TTY : 控制终端
	COMMAND : CMD显示完整命令的线程号
	STAT : 多字符进程状态。
		stat或者s 的状态
               		D    uninterruptible sleep (usually IO)
               		I    Idle kernel thread
              		R    running or runnable (on run queue)
              		S    interruptible sleep (waiting for an event to complete)
               		T    stopped by job control signal
               		t    stopped by debugger during the tracing
               		W    paging (not valid since the 2.6.xx kernel)
               		X    dead (should never be seen)
               		Z    defunct ("zombie") process, terminated but not reaped by its parent

       		如果使用BSD格式，会有如下状态
	                <    high-priority (not nice to other users)
        	        N    low-priority (nice to other users)
        	        L    has pages locked into memory (for real-time and custom IO)
             	        s    is a session leader
              		l    is multi-threaded (using CLONE_THREAD, like NPTL pthreads do)
               		+    is in the foreground process group
		

		ps ajx
	        PPID     PID    PGID     SID TTY        TPGID STAT   UID   TIME COMMAND
     	 	0       1       1        1   ?             -1 Ss       0   0:03 /sbin/init splash
      		0       2       0        0   ?             -1 S        0   0:00 [kthreadd]
      		2       3       0        0   ?             -1 I<       0   0:00 [rcu_gp]
		PPID : 父ID
		PID : 进程ID
		PGID : 组ID
		SID : 会话ID
		TPGID : 进程连接到的tty（终端）上的前台进程组的ID，如果进程未连接到tty，则为-1
		
2.2 kill
	kill -l :查看系统有哪些信号
        kill -9 pid : 杀死某个进程, -9是杀死进程信号，可以使用 kill -l查看所有支持的信号 	
