1、库的介绍
	什么是库
		库是二进制文件，是源代码文件的另一种表现形式，是加了密的源代码
		是一些功能详尽或者是相似的函数的集合体

	使用库有什么好处
		提高代码的可重用性，而且还可以提高程序的健壮性
		可以减少开发者的代码开发量，缩短开发周期
	
	库制作完成以后，如何给用户使用
		头文件--包含了库函数的声明
		库文件--包含了库函数的代码实现
		注意：库不能单独使用，只能作为其他执行程序的一部分完成某些功能，也就是说只能被其他程序调用才能使用
	
	库的分类：静态库-static library，动态（共享）库-shared library

2、静态库static library
	静态库可以认为是一些目标代码的集合，是在可执行程序运行前就已经加入到执行代码中，成为执行程序的一部分。按照习惯，一般以.a作为文件后缀名。
	静态库一般分为三个部分
		前缀:lib
		库名称:自定义即可，比如test
		后缀: .a
	所以最终的静态库的名字应该为：libtest.a

3、静态库的制作
	下面以func1.c func2.c和head.h 三个文件为例讲述静态库的制作和使用，其中head.h文件中有函数声明，func1.c和fun2.c中有函数实现

	步骤1
		将c源文件生成对应的.o文件
			gcc -c func1.c func2.c
		注意：
			为了方便管理可以生成一个bin目录然后进入到bin目录中
			命令：gcc -c ../func1 ../func2

		或者分别生成 .o文件
			gcc -c func1.c -o func1.o
			gucc -c func2.c -o func2.o
	
	步骤2
		使用打包工具ar将准备好的.o文件打包为.a文件	
		再使用ar工具的时候需要添加参数rcs
			r 更新，c 创建 ，s 建立索引
		命令 : ar rcs 静态库名 所有.o文件
			ar rsc libtest.a func1.o func2.o
		
		流程：
			源文件（.h .c等）----> 预编译---->编译---->汇编---->目标文件（a1.o,a2.o...）
	
	步骤3
		将库文件和.h文件 拷贝到项目中，为了方便管理 创建一个lib目录存放第三方的库文件，再创建一个incldue目录存放.h文件
		第三方代码中include "head.h" ，并调用了对应的方法后，编译项目。

		编译时注意
			指定库文件所在路径 -L./lib/
                        指定头文件所在路径 -I./include/
			指定库的名子 -ltest,这里库文件名叫 libtest.a,但是使用-l参数的时候，需要去掉前缀“lib”和后缀“.a”
		命令：gcc -o ./bin/main main.c -I./include/ -L./lib/ -ltest

4、动态/共享库(shared library) 
	共享库在程序编译时并不会被链接到目标代码中，而是在程序运行时才被载入。不同的应用程序如果调用相同的库，那么在内存里只需要有一份该共享库的拷贝，规避了空间浪费问题。
	动态库在成勋运行时才被载入，也解决了静态库对程序的更新、部署和发布会带来的麻烦。用户只需要更新动态库即可，增量更新。
	为什么需要动态库，其实也是静态库的特点导致。
	按照习惯，一般以“.so”作为文件后缀名。共享库一般命名为三个部分
		前缀:lib
		库名称：自定义即可，如:test
		后缀：.so
	最终静态库的名字应该为：libtest.so

		
        动态库在内存中只存在一份拷贝，避免了静态库浪费空间的问题：如下图
		
		程序1                             —————————————————————
	        --------------------             |                     |
		|   program1.o     |             |                     |
                |   DynamicMath.so |------------>| program1.o          |
		--------------------	         | ...                 |
                                                 | ...                 |
                程序2                            | ...                 |
	        --------------------             |                     |
		|   program1.o     |------------>| Program2.o          | 
                |   DynamicMath.so |             | ...                 |
		--------------------	         | ...                 |
                                                 | ...                 |
	        --------------------             | ...                 |     
                |   DynamicMath.so |------------>| DynamicMath.so      |
		--------------------	         |                     |
                                                 |                     |
                                                 ----------------------

5、动态库的制作	
	1) 生成目标文件.o，此时要加编译选项: -fPIC 或者 -fpic
		gcc -fpic -c fun1.c fun2.c
	   参数：-fpic 创建与地址无关的编译程序（pic,position independent code），目的就是为了能在多个应用程序之间共享
        
	2）生成共享库，此时要加链接器选项 -shared （指定生成动态链接库）
		gcc -shared fun1.o fun2.o -o libtest.so

	使用命令 ：nm libtest.so ,可以查看so中的函数，以及函数信息如下：
		0000000000004030 b completed.8061
                 		 w __cxa_finalize@@GLIBC_2.2.5
		0000000000001080 t deregister_tm_clones
		00000000000010f0 t __do_global_dtors_aux
		0000000000003e18 d __do_global_dtors_aux_fini_array_entry
		0000000000004028 d __dso_handle
		0000000000003e20 d _DYNAMIC
		0000000000001188 t _fini
		0000000000001130 t frame_dummy
		0000000000003e10 d __frame_dummy_init_array_entry
		0000000000002100 r __FRAME_END__
		0000000000001139 T func1
		000000000000115f T func2
		0000000000004000 d _GLOBAL_OFFSET_TABLE_
		                 w __gmon_start__
		0000000000002018 r __GNU_EH_FRAME_HDR
		0000000000001000 t _init
		                 w _ITM_deregisterTMCloneTable
		                 w _ITM_registerTMCloneTable
		                 U printf@@GLIBC_2.2.5
		                 U putchar@@GLIBC_2.2.5
		00000000000010b0 t register_tm_clones
		0000000000004030 d __TMC_END__
	
	其中类型是T的是开发的函数，如下：
                 0000000000001139 T func1
                 000000000000115f T func2
	

6、使用共享库的项目编译	
	将head.h放在inlude目录下 libtest.so 放在lib目录下
		gcc -o ./bin/main main.c -I./include/ -L./lib/ -ltest	
	注意：此时-L 的使用是给链接器使用的，用来保证能找到动态库的路径
	      当程序运行时刻，系统需要使用的是加载器ldd根据系统动态库路径查找动态库，与编译时编译器参数-L指定的路径无关。

7、linux共享库配置
	在没有设置linux共享库的时候如果运行可执行程序，会报错误，提示找不到共享库路径
		./bin/main: error while loading shared libraries: libtest.so: cannot open shared object file: No such file or directory
	原因：
		当系统加载可执行代码的时候，除了要知道其所依赖的库的名字，还需要知道库文件的绝对路径
		此时就需要系统动态载入器(dynamic linker/loader) ,通过使用ldd <文件名>，查看可执行程序动态库的链接情况
		    命令：ldd main
		    返回：
			linux-vdso.so.1 (0x00007ffebf561000)
			libtest.so => not found
			libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f2cf6212000)
			/lib64/ld-linux-x86-64.so.2 (0x00007f2cf641b000)
		libtest.so => not found ，说明当前程序没有链接到动态库
		
		对于elf格式的可执行程序，是由ld-linux.so*来完成的，它先后搜索elf文件的如下路径
			a) DT_RPATH段
			b) 环境变量 LD_LIBRARY_PATH
			c) /etc/ld.so.cache文件列表
			d) /lib 目录
			e) /usr/lib 目录
		找到库文件后，才能加载动态库，可以使用file <文件名> 命令，查看文件的格式
		    命令: file main	
                    返回:
                         main: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,
                         BuildID[sha1]=d9af180500ff1aa03734d01c0fce7a099cdcfc8e, for GNU/Linux 3.2.0, not stripped
                    "main: ELF"说明 当前编译出来的可执行文件是elf格式的
  
	共享库加载设置的几种方法，如下:
                 a) 拷贝自己制作的共享库到/lib/目录或者/usr/lib/目录，但是这种风险会比较高,不推荐。
                 b) 临时设置 LD_LIBRARY_PATH: export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:库路径，开发的时候临时设置以下便于开发。
                 c) 永久设置，把 export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:库路径 设置到~/.bashrc文件中去，然后执行下列三种方法之一
                         执行: . ~/.bashrc 使配置文件生效
                         执行：source ~/.bashrc 使配置文件生效
                         退出当前终端，然后在此登陆也可以使配置文件生效
 
                 d) 永久设置，把export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:库路径 设置到/etc/profile文件中,系统文件，不建议修改
                 e) 将其添加到/etc/ld/so/cache文件中 ，系统配置文件，不建议修改
                         编辑 /etc/ld.so.conf文件，加入库文件所在目录的路径，直接把路径填写到最后一行就可以
                         运行 sudo ldconfig -v  ，该命令会重建etc/ld.so.cache文件(这是个二进制文件，效率比较高)
 
         解决了库的路径问题后，再次使用ldd命令可以查看可执行文件依赖的库文件
                         linux-vdso.so.1 (0x00007fff3c7dc000)
                         libtest.so => /home/sandro/mywork/gitwork/sandro/c-pro/cProjects/gcc_shared_lib_test/lib/libtest.so (0x00007f46572f0000)
                         libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f46570ee000)
                         /lib64/ld-linux-x86-64.so.2 (0x00007f46572fc000)
         可以看到libtest.so已经和当前路径链接上了	

8、共享库特点
	动态库把对一些库函数的链接载入推迟到程序运行的时期。
	可以实现进程之间的资源共享（因此动态库也成为共享库）
	让一些程序升级变得简单
	甚至可以真正做到链接载入完全有程序员在代码中控制（显示调用）

9、动态库和静态库的优缺点：
	静态库
		优点：
			执行速度快，是因为静态库已经编译到可执行文件中去了
			移植方便，不依赖其他库文件
		缺点：
			耗费内存，是由于每一个静态库的可执行文件都会加载一次
			部署更新麻烦，因为静态库修改以后，所有的调用到这个静态库的可执行文件都需要重新编译
	动态库
		优点：
			节省内存
			部署省级方便，只需替换动态库即可，然后再重启服务
		缺点：
			加载动态库比静态库慢
			移植性差，需要把所有用到的动态库都移植
