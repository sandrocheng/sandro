1、什么是线程
	轻量级的进程(LWP, light weight process)，在linux下线程的本质仍是进程。
	进程：拥有独立的地址空间，拥有PCB。
	线程：有PCB，但没有独立的地址空间，多个线程共享进程空间。

 	在linux操作系统下：
		线程是最小的执行单位
		进程是最小的资源分配单位，可看成是只有一个线程的进程。
		多个子线程和主线程共享一个地址空间，只有一个PID
		通过线程号来区分不同线程
		除了栈以外，其余资源都可以共享。栈大小(stack size)使用ulimit -a查看，一般是8M。
		主线程和子线程谁先抢到cpu资源，谁先执行。
		在多核cpu上，一个进程里的多个线程可以分别在多个核上并发运行
	
	线程特点：
		类Unix系统中，早期是没有“线程”概念的，80年代才引入，借助进程机制实现除了线程的概念，因此在这类系统中进程和线程关系密切。
		线程是轻量级进程(light-weight process),也有PCB，创建线程使用的底层函数和进程一样，都是clone
		从内核里看进程和线程是一样的，都有各自不同的PCB
		进程可以蜕变成线程。
		在linux下，线程是最小的执行单位；进程是最小的资源分配单位
	
	查看指定线程的LWP号： ps -Lf pid
	
	实际上，无论是创建进程的fork，还是创建线程的pthread_create,底层实现都是调用同一个内核函数clone
		如果复制对方的地址空间，那么就产出一个“进程”
		如果共享对方的地址空间，就产生一个“线程”。
	所以，Linux内核是不区分进程和线程的，只在用户层面上进行区分。
	线程所有操作函数 pthread_*是库函数，而非系统调用

2、线程共享资源
	文件描述符表
	每种信号的处理方式
	当前工作目录
	用户ID和组ID
	内存地址空间(.text/.data/.bss/heap/共享库)

3、线程非共享资源
	线程ID
	处理器现场和栈指针(内核栈)
	独立的栈空间(用户空间栈)
	errno变量（这是个全局变量，虽然改变时加锁了，但是一般来讲线程编成就不要用errno了，用strerror）
	信号屏蔽字（很少在线程里使用信号）
	调度优先级

4、线程优缺点
	优点：
		提高程序并发性
		开销小
		数据通信、共享数据方便
	缺点：
		库函数，不稳定
		gdb调试、编写困难
		对信号支持不好
	优点相对突出，缺点均不是硬伤，linux下由于实现方法导致进程，线程差别不大

5、线程函数
	详见/c-pro/cProjects/linuxThread

