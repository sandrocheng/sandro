/*
 * processFunc.h
 *
 *  Created on: 2023年1月10日
 *      Author: sandro
 *
 * 1 fork 函数
 *		函数作用：创建子进程
 *		原型： pid_t fork(void);
 *		返回值：
 *			成功：父进程返回子进程的PID(>0)，子进程返回0
 *			调用失败： 返回 -1 ,设置errno值
 *		父子进程的执行逻辑
 *			父进程执行pid>0的逻辑，子进程执行pid=0的逻辑
 * 		函数讲解：
 *
 *        4G  +------------父进程--------------+                                    4G  +-------------子进程- -----------+
 *            |                               |                                        |                               |
 *        内  |               内存管理          |                                    内  |               内存管理          |
 *            | linux          进程管理        |                                        | linux          进程管理         |
 *        核  | kenrnl         设备驱动管理     |                                     核  | kenrnl        设备驱动管理      |
 *            |               VFS虚拟文件系统   |  内核区部分数据会改动，比如 父子进程id等      |               VFS虚拟文件系统   |
 *        区  |                               |                                     区  |                               |
 *            |                               |                                        |                               |
 *        3G  +-------------------------------+                                    3G  +-------------------------------+
 *            |        环境变量 env            |                                         |        环境变量 env            |
 *            +-------------------------------+                                        +-------------------------------+
 *            |        命令行参数              |                fork                     |        命令行参数              |
 *        用  +-------------------------------+  ==============================\    用  +-------------------------------+
 *            | 栈空间（小）从高->底分配地址      |  ==============================/        | 栈空间（小）从高->底分配地址      |
 *            +-------------------------------+                                        +-------------------------------+
 *            |        共享库                  |                                        |        共享库                  |
 *            +-------------------------------+                                        +-------------------------------+
 *        户  |    堆空间（大）从低->高分配地址    |                                    户  |    堆空间（大）从低->高分配地址    |
 *            +-------------------------------+                                        +-------------------------------+
 *            |        .bss(未初始化全局变量)    |      用户区数据完全复制                   |        .bss(未初始化全局变量)    |
 *            +-------------------------------+                                        +-------------------------------+
 *            |      .data(已初始化全局变量)     |                                        |      .data(已初始化全局变量)     |
 *        区  +-------------------------------+                                     区  +-------------------------------+
 *            |  .txt(代码段，二进制机器指令)     |                                        |  .txt(代码段，二进制机器指令)     |
 *            +-------------------------------+                                        +-------------------------------+
 *            |     受保护的地址（0~4K）           |                                        |     受保护的地址（0~4K）           |
 *          0 +-------------------------------+                                      0 +-------------------------------+                        
 *
 *
 *
 * 2 getpid/getppid
 * 		getpid - 得到当前进程的PID
 * 		pid_t getpid(void)
 *
 *		getppid - 得到当前进程的父进程的PID
 *		pid_t getppid(void)
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

#ifndef PROCESSFUNC_H_
#define PROCESSFUNC_H_

#include <stdio.h> //常规c标准库
#include <stdlib.h>//常规c标准库
#include <string.h>//常规c标准库
#include <sys/types.h>//Unix/Linux系统的基本系统数据类型的头文件
#include <unistd.h>//unix std的意思,是POSIX标准定义的unix类系统定义符号常量的头文件
#include <sys/stat.h>//是 unix/linux 系统定义文件状态所在的伪标准头文件
#include <fcntl.h>//unix标准中通用的头文件，其中包含的相关函数有 open，fcntl，shutdown，unlink，fclose等！
#include <dirent.h>//常规c标准库
#include "tools.h"

/**
 * 创建一个子进程
 */
void forkTest();

/**
 * 创建n个子进程
 * 注意：不能简单的使用for循环fork,会创建出3代，4代 ，5代 等多重子进程（共[2的n次方 - 1] 个）
 *
 */
void forkNPorcess(int n);
#endif /* PROCESSFUNC_H_ */
