/*
 * processFunc.h
 *
 *  Created on: 2023年1月10日
 *      Author: sandro
 *
 * 1 fork 函数
 *		函数作用：创建子进程
 *		原型： pid_t fork(void);
 *		返回值：
 *			成功：父进程返回子进程的PID(>0)，子进程返回0
 *			调用失败： 返回 -1 ,设置errno值
 *		父子进程的执行逻辑
 *			父进程执行pid>0的逻辑，子进程执行pid=0的逻辑
 * 		函数讲解：
 *
 *        4G  +------------父进程--------------+                                    4G  +-------------子进程- -----------+
 *            |                               |                                        |                               |
 *        内  |               内存管理          |                                    内  |               内存管理          |
 *            | linux          进程管理        |                                        | linux          进程管理         |
 *        核  | kenrnl         设备驱动管理     |                                     核  | kenrnl        设备驱动管理      |
 *            |               VFS虚拟文件系统   |  内核区部分数据会改动，比如 父子进程id等      |               VFS虚拟文件系统   |
 *        区  |                               |                                     区  |                               |
 *            |                               |                                        |                               |
 *        3G  +-------------------------------+                                    3G  +-------------------------------+
 *            |        环境变量 env            |                                         |        环境变量 env            |
 *            +-------------------------------+                                        +-------------------------------+
 *            |        命令行参数              |                fork                     |        命令行参数              |
 *        用  +-------------------------------+  ==============================\    用  +-------------------------------+
 *            | 栈空间（小）从高->底分配地址      |  ==============================/        | 栈空间（小）从高->底分配地址      |
 *            +-------------------------------+                                        +-------------------------------+
 *            |        共享库                  |                                        |        共享库                  |
 *            +-------------------------------+                                        +-------------------------------+
 *        户  |    堆空间（大）从低->高分配地址    |                                    户  |    堆空间（大）从低->高分配地址    |
 *            +-------------------------------+                                        +-------------------------------+
 *            |        .bss(未初始化全局变量)    |      用户区数据完全复制                   |        .bss(未初始化全局变量)    |
 *            +-------------------------------+                                        +-------------------------------+
 *            |      .data(已初始化全局变量)     |                                        |      .data(已初始化全局变量)     |
 *        区  +-------------------------------+                                     区  +-------------------------------+
 *            |  .txt(代码段，二进制机器指令)     |                                        |  .txt(代码段，二进制机器指令)     |
 *            +-------------------------------+                                        +-------------------------------+
 *            |     受保护的地址（0~4K）           |                                        |     受保护的地址（0~4K）           |
 *          0 +-------------------------------+                                      0 +-------------------------------+                        
 *
 *
 *
 * 2、getpid/getppid
 * 		getpid - 得到当前进程的PID
 * 		pid_t getpid(void)
 *
 *		getppid - 得到当前进程的父进程的PID
 *		pid_t getppid(void)
 *
 * 3、exec函数族
 * 		有时候需要在一个进程里面执行其他的命令或者是用户自定义的应用程序，此时就用到了exec函数族当中的函数
 * 		使用方法一般都是在父进程里调用fork,创建出一个子进程，然后在子进程里面调用exec函数
 *
 *        4G  +------------父进程--------------+                         4G  +-------------子进程- -----------+
 *            |                               |                             |                               |
 *        内  |               内存管理          |                         内  |               内存管理          |
 *            | linux          进程管理        |                             | linux          进程管理         |
 *        核  | kenrnl         设备驱动管理     |                          核  | kenrnl        设备驱动管理      |
 *            |               VFS虚拟文件系统   |                             |               VFS虚拟文件系统   |
 *        区  |                               |                          区  |                               |
 *            |                               |                             |                               |
 *        3G  +-------------------------------+                         3G  +-------------------------------+
 *            |        环境变量 env            |                             |        环境变量 env            |
 *            +-------------------------------+                             +-------------------------------+
 *            |        命令行参数              |         fork                 |        命令行参数              |
 *        用  +-------------------------------+  ===================\    用  +-------------------------------+
 *            | 栈空间（小）从高->底分配地址      |  ===================/        | 栈空间（小）从高->底分配地址      |
 *            +-------------------------------+                              +-------------------------------+
 *            |        共享库                  |                              |        共享库                  |
 *            +-------------------------------+                              +-------------------------------+
 *        户  |    堆空间（大）从低->高分配地址    |                          户  |    堆空间（大）从低->高分配地址    |
 *            +-------------------------------+                              +-------------------------------+
 *            |        .bss(未初始化全局变量)    |                              |        .bss(未初始化全局变量)    |
 *            +-------------------------------+                              +-------------------------------+
 *            |      .data(已初始化全局变量)     |                              |      .data(已初始化全局变量)     |            excel(path,"ls","-l",NULL)
 *        区  +-------------------------------+                           区  +-------------------------------+              +---------------------+
 *            |  .txt(代码段，二进制机器指令)     |                              |  .txt(代码段，二进制机器指令)     |<--代码段拷贝--|  ls 代码段           |
 *            +-------------------------------+                               +-------------------------------+             +---------------------+
 *            |     受保护的地址（0~4K）           |                               |     受保护的地址（0~4K）           |
 *          0 +-------------------------------+                             0 +-------------------------------+
 *
 *		 调用execl函数以后，在子进程的代码段里会被ls命令的代码段替换，此时子进程的地址空间没有变化，子进程的PID也没有变化
 *		 换核不换壳：新程序会替换当前进程的代码段，数据段，堆和栈，原有的进程空间没有发生变化，并没有创建新进程，进程的Pid没有变化
 *
 *		3.1) execl函数
 *			函数原型： int execl(const char *pathname, const char *arg, ...  NULL );
 *			参数介绍：
 *					path:要执行的程序的绝对路径
 *					变参arg：要执行的程序需要的参数
 *    				arg占位，通常写应用程序的名字
 *    				arg后面的参数，命令的参数
 *					参数写完之后：NULL
 *			返回值：若是成功，则不返回，不会再执行exec函数后面的代码；若是失败，会执行
 *			execl后面的代码可以用perror打印错误原因。
 *			execl函数一般执行自己写的程序
 *
 *		3.2) execlp函数
 *			函数原型：int execlp(const char *file, const char *arg, ... NULL );
 *			函数介绍：file 执行命令的名字，根据PATH环境变量来搜索该命令
 *			arg: 占位
 *			arg后面的：命令的参数
 *			参数写完之后：NULL
 *			返回值：若是成功，则不返回，不会再执行exec函数后面的代码，若是失败，会执行exec后面的代码，可以用perror打印错误原因。
 *			execlp函数一般是执行系统命令
 *
 * 4、wait
 * 		原型：pid_t wait(int *wstatus);
 * 		函数作用：
 * 			阻塞并等待子进程退出
 * 			回收子进程
 * 			获取子进程结束状态（退出原因）
 *		返回值：
 *			成功，返回清理掉的子进程ID；
 *			失败，-1（没有子进程）
 *		status参数：
 *			子进程的退出状态--传出参数
 *			WIFEXITED（status）: 非0 ，进程正常退出
 *			WEXITSTATUS(status) ：获取进程退出状态
 *	        WIFSIGNALED(status) ： 非0，进程异常终止
 *	        WTERMSIG(status) ： 获取进程终止的信号编号
 *
 * 5 waitpid
 * 		原型：pid_t waitpid(pid_t pid, int *wstatus, int options);
 * 		函数作用：同wait
 * 		函数参数：
 * 			pid : -1 ,等待任意子进程，与wait等效
 * 				  >0 ,等待pid这个子进程
 * 				  =0 ，等待进程组id与目前进程id相等的任意子进程，也就是说任何和调用waitpid()函数的进程再同一个进程组的进程。
 * 				  <-1 ,等待其组id等于pid绝对值的任意进程，适用于子进程再其他组的情况
 * 	    	status:子进程的退出状态，用法同wait
 * 	    	option: 设置为 WNOHANG，函数非阻塞(若果没结束立刻返回)，设置位0 ，函数阻塞
 * 	    函数返回值
 * 			>0 返回回收掉的子进程id
 * 			-1 无子进程
 * 			=0 参数3 为 WNOHANG,且子进程正在运行。
 *
 *
 *
 *
 *
 *
 */

#ifndef PROCESSFUNC_H_
#define PROCESSFUNC_H_

#include <stdio.h> //常规c标准库
#include <stdlib.h>//常规c标准库
#include <string.h>//常规c标准库
#include <sys/types.h>//Unix/Linux系统的基本系统数据类型的头文件
#include <unistd.h>//unix std的意思,是POSIX标准定义的unix类系统定义符号常量的头文件
#include <sys/stat.h>//是 unix/linux 系统定义文件状态所在的伪标准头文件
#include <fcntl.h>//unix标准中通用的头文件，其中包含的相关函数有 open，fcntl，shutdown，unlink，fclose等！
#include <dirent.h>//常规c标准库
#include <sys/wait.h>//unix类库
#include "tools.h"

/**
 * 创建n个子进程并使用waitpid全部回收
 * 返回结束状态值
 */
int forkAndWaitpid(int n);

/**
 * 创建n个子进程并使用wait全部回收
 */
void forkAndWait(int n);
/**
 * 执行一个系统PATH里配置的命令
 */
void execCMD(int argc ,char* argv[]);

/**
 * 执行一个可执行文件
 */
void execfile(int argc ,char* argv[]);

/**
 * 创建一个子进程
 */
void forkTest();

/**
 * 创建n个子进程
 * 注意：不能简单的使用for循环fork,会创建出3代，4代 ，5代 等多重子进程（共[2的n次方 - 1] 个）
 *
 */
void forkNPorcess(int n);
#endif /* PROCESSFUNC_H_ */
