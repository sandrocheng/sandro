<?xml version="1.0" encoding="UTF-8"?>
<project name="build_common" default=""  basedir=".">

	<!-- ######属性定义部分###### -->
	<!-- 时间戳属性定义，用于包的文件名 -->
	<tstamp>
		<format property="build_date" pattern="yyMMddHHmmss"/>
	</tstamp>

	<!-- 项目的目录属性定义 -->
	<property name="src" value="${project_path}\src"/>	<!-- 源代码 -->
	<property name="res" value="${project_path}\res"/>	<!-- 资源 -->
	<property name="lib" value="${project_path}\libs"/>	<!-- 库 -->
	<property name="assets" value="${project_path}\assets"/>		<!-- assets -->
	<property name="bin" value="${project_path}\bin"/>	<!-- 包目录 -->
	<property name="classes" value="${project_path}\classes"/>	<!-- classes -->
	<property name="gen" value="${bin}\gen" />	<!-- 生成R.java -->
	<property name="releaseres" value="${project_path}\releaseConfig"/>	<!-- 资源 -->

	<!-- 编码设置 -->
	<property name="encoding" value="utf-8"/>

	<!-- Android framework定义 -->
    <property name="android_framework" value="${android_platform}\framework.aidl"/>
	<property name="dex" value="${bin}\classes.dex"/>

    <!-- 工具属性定义 -->
    <property name="aapt" value="${android_platform_tools}\aapt"/>
    <property name="aidl" value="${android_platform_tools}\aidl" />
    <property name="adb" value="${android_platform_tools}\adb"/>
    <property name="dx" value="${android_platform_tools}\dx.bat"/>
	<property name="apkbuilder" value="${android_tools}\apkbuilder.bat"/>
	<property name="signer" value="jarsigner"/>	<!--待确认-->
	<property name="androidjar" value="${android_platform}\android.jar"/>
    <property name="align" value="${android_tools}\zipalign"/>


    <!-- ###### Target定义部分 ###### -->
    <!-- 初始化目录 -->
    <target name="init" >
    	
    	<!--<echo>替换项目资源文件config.xml</echo>-->	
    	<delete file="${res}\values\config.xml" />
		<!--<echo>文件移位至${res}\values</echo>-->	

		<!--用RDM自定义的参数来替代文件名--> 
    	<move file="${releaseres}\config1.xml" tofile="${res}\values\config.xml"/>
    	<delete dir="${releaseres}" />
    	<!--<echo>替换项目资源文件config.xml结束</echo>-->	
    	
    	
		<echo>如果bin和lib目录不存在，则创建</echo>
		<mkdir dir="${bin}" />
		<mkdir dir="${lib}" />

		<echo>清空bin和classes目录</echo>
		<delete dir="${classes}"/>
		<delete>
			<fileset dir="${bin}" includes="**/**"/>
		</delete>

		<mkdir dir="${classes}" />
		<mkdir dir="${gen}" />
	</target>
	
    <!-- 为该项目资源生成R.java文件 -->
    <target name="generate">
        <echo>开始生成R.java文件</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-m" />
            <arg value="-J" />
            <arg value="${gen}" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${res}" />
            <arg value="-I" />
            <arg value="${androidjar}" />
        </exec>
		<echo>完成生成R.java文件</echo>
    </target>

    <!-- 从*.aidl文件生成java classes -->
    <target name="aidl">
        <echo>开始生成*.aidl实现的java文件</echo>
        <apply executable="${aidl}" failonerror="true">
            <arg value="-p${android_framework}" />
            <arg value="-I${src}" />
            <fileset dir="${src}">
                <include name="**/*.aidl"/>
            </fileset>
        </apply>
		<echo>完成生成*.aidl实现的java文件</echo>
    </target>

    <!-- 编译项目的.java文件为.class文件 -->
    <target name="compile">
    	<echo>开始编译...</echo>
        <javac encoding="${encoding}"
        	debug="false"
        	extdirs=""
        	target="1.6"
            destdir="${classes}"
            bootclasspath="${androidjar}">
        	<src path="${src}"/>
        	<src path="${gen}"/>
            <classpath>
                <fileset dir="${lib}" includes="*.jar"/>
            </classpath>
         </javac>
    	<echo>结束编译...</echo>
    </target>

	<!-- 打包 -->
	<target name="package">
	    <jar basedir="${classes}" destfile="${bin}\temp.jar"/>
	</target>

	<!-- 对打包后的结果进行混淆 -->
	<target name="obfuscate"  if="${env.obfuscated}">
		<echo>开始混淆</echo>
		
		<java jar="${proguard_home}\lib\proguard.jar" fork="true" failonerror="true">
		<jvmarg value="-Dmaximum.inlined.code.length=32"/>
		
		<arg value="-injars bin/temp.jar"/>
		
		<arg value="-outjars bin/obfuscated.jar"/>
		
		<arg value="-libraryjars libs/wup.jar"/>
		<arg value="-libraryjars libs/lbs.jar"/>
		<arg value="-libraryjars libs/Eup_rqd_1.3.4_release_optimize.jar"/>
		<arg value="-libraryjars libs/libGoogleAnalyticsV2.jar"/>
		<arg value="-libraryjars libs/mopay-android-3.0.0.jar"/>
		<arg value="-libraryjars libs/tms.jar"/>
		<arg value="-libraryjars ${androidjar}"/>
		
		
		<arg value="-dontskipnonpubliclibraryclasses"/>
		<arg value="-dontskipnonpubliclibraryclassmembers"/>
		

		<!-- Keep Options -->
		<arg value="-keep public class * extends android.app.IntentService"/>
		<arg value="-keep public class * extends android.app.Activity"/>
		<arg value="-keep public class * extends android.app.Application"/>
		<arg value="-keep public class * extends android.app.Service"/>
		<arg value="-keep public class * extends android.content.BroadcastReceiver"/>
		<arg value="-keep public class * extends android.content.ContentProvider"/>
		<arg value="-keep public class * extends android.view.View {
				public &lt;init&gt;(android.content.Context);
				public &lt;init&gt;(android.content.Context, android.util.AttributeSet);
				public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);
				public void set*(...);
			}
		"/>
		<arg value="-keep public class * extends android.widget.ImageView{
				public &lt;init&gt;(android.content.Context);
				public &lt;init&gt;(android.content.Context, android.util.AttributeSet);
				public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);
				public void set*(...);
			}
		"/>
		<arg value="-keep public class * extends android.widget.Button{
				public &lt;init&gt;(android.content.Context);
				public &lt;init&gt;(android.content.Context, android.util.AttributeSet);
				public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);
				public void set*(...);
			}
		"/>				
		<arg value="-keepclasseswithmembers class * {
				public &lt;init&gt;(android.content.Context, android.util.AttributeSet);
				public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);
			}
		"/>
		<arg value="-keepclassmembers class * implements android.os.Parcelable {
				static android.os.Parcelable$Creator CREATOR;
			}
		"/>
		<arg value="-keepclassmembers class **.R$* {
				public static &lt;fields&gt;;
			}
		"/>
		
		<arg value="-keepclassmembers enum * {
				public static **[] values();
				public static ** valueOf(java.lang.String);
			}" 
		/>

		<!-- system class -->
		<arg value="-keep class android.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		<arg value="-keep class com.android.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		<arg value="-keep class com.android.internal.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		
		
		<!-- SDK公开接口和UI库公开接口 -->
		<arg value="-keepattributes Signature, Exceptions, InnerClasses" />
		<arg value="-keep public class com.tencent.tmsecure.constants.** {public &lt;fields&gt;;}"/>
		<arg value="-keep public class com.tencent.tmsecure.dao.* {public &lt;fields&gt;; &lt;methods&gt;;}" />
		<arg value="-keep public interface com.tencent.tmsecure.dao.* {&lt;methods&gt;;}" />
		<arg value="-keep public class com.tencent.tmsecure.entity.* {public &lt;fields&gt;; public &lt;methods&gt;;}" />
		<arg value="-keep public class com.tencent.tmsecure.exception.* {&lt;methods&gt;;}" />
		<arg value="-keep public class com.tencent.tmsecure.service.* {public &lt;fields&gt;;&lt;methods&gt;;}" />
		<arg value="-keep public interface com.tencent.tmsecure.service.* {&lt;methods&gt;;}" />
		<arg value="-keepclassmembers public class com.tencent.tmsecure.service.*  { public static &lt;fields&gt;; }" />
		<arg value="-keep public class com.tencent.tmsecure.service.manager.* {public &lt;fields&gt;; &lt;methods&gt;;}" />
		<arg value="-keepclassmembers public class com.tencent.tmsecure.service.manager.*  { public static &lt;fields&gt;; }" />
		<arg value="-keep public class com.tencent.tmsecure.utils.* {public &lt;fields&gt;; &lt;methods&gt;;}" />
		<arg value="-keepclassmembers enum * {
				public static **[] values();
				public static ** valueOf(java.lang.String);
			}" 
		/>
		<arg value="-keep class com.tencent.qqdoctor.uilib.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		
			
	    <!-- 适配类 -->
		<arg value="-keep class com.motorola.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		<arg value="-keep class com.tencent.tccsync.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		<arg value="-keep interface com.tencent.tccsync.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		<arg value="-keep enum com.tencent.tccsync.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		
		<arg value="-keep class org.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		<arg value="-keep interface org.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		<arg value="-keep enum org.** {&lt;fields&gt;;&lt;methods&gt;;}"/>

		<arg value="-keep class com.tencent.tccdb.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		<arg value="-keep interface com.tencent.tccdb.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		<arg value="-keep enum com.tencent.tccdb.** {&lt;fields&gt;;&lt;methods&gt;;}"/>

		<arg value="-keep class QQPIM.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		<arg value="-keep interface QQPIM.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		<arg value="-keep enum QQPIM.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		<arg value="-keep class com.tencent.mobileqq.app.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		
		<arg value="-keep class com.tencent.feedback.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		<arg value="-keep interface com.tencent.feedback.** {&lt;fields&gt;;&lt;methods&gt;;}"/>
		<arg value="-keep enum com.tencent.feedback.** {&lt;fields&gt;;&lt;methods&gt;;}"/>	
		
		

		<!-- Shrinking Options -->
		<!-- <arg value="-dontshrink" /> -->
		<arg value="-printusage unused_code.txt" />

		<!-- Optimization Options -->
		<!-- <arg value="-dontoptimize"/> -->
		<arg value="-repackageclasses"/>
		<arg value="-allowaccessmodification"/>
		<!-- <arg value="-optimizationpasses 5" /> -->

		<!-- Obfuscation Options -->
		<arg value="-printmapping code_mapping.txt" />
		<arg value="-dontusemixedcaseclassnames"/>
		<arg value="-keepattributes *Annotation*"/>

		<!-- Preverification Options -->
		<!-- <arg value="-dontpreverify"/> -->

		<!-- General Options -->
		<arg value="-verbose"/>
		<arg value="-dontwarn" />
		
	</java>
    <copy file="code_mapping.txt" tofile="${bin}\code_mapping.txt"/>
	<delete dir="${classes}"/>
	<mkdir dir="${classes}"/>
	<unzip src="bin/obfuscated.jar" dest="${classes}"/>
	<delete file="bin/obfuscated.jar"/>
	<echo>结束混淆</echo>
	</target>
	
    <!-- 将该项目经过混淆的.class文件转换为.dex文件 -->
    <target name="dex">
    	
    	<echo>temp.jar迁移到AutoTest/libs文件夹下</echo>
		<copy file="bin/temp.jar" tofile="AutoTest/libs/temp.jar"/>
    	
        <echo>Converting compiled files and external libraries into ${bin}/${dex}...</echo>
        <apply executable="${dx}" failonerror="true" parallel="true">
            <arg value="--dex" />
            <arg value="--output=${dex}" />
            <arg path="${classes}" />
			<fileset dir="${lib}" includes="Eup_rqd_1.3.4_release_optimize.jar"/>
        	<fileset dir="${lib}" includes="lbs.jar"/>
        	<fileset dir="${lib}" includes="libGoogleAnalyticsV2.jar"/>
        	<fileset dir="${lib}" includes="mopay-android-3.0.0.jar"/>
        	<fileset dir="${lib}" includes="tms.jar"/>
        	<fileset dir="${lib}" includes="wup.jar"/>
        </apply>
		<delete file="bin/obfuscated.jar"/>
    </target>

    <!-- 打包项目的资源文件 -->
    <target name="package_res_with_assets">
        <echo>打包资源文件</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${res}" />
            <arg value="-A" />
            <arg value="${assets}" />
            <arg value="-I" />
            <arg value="${androidjar}" />
            <arg value="-F" />
            <arg value="${bin}\rc.ap_" />
        </exec>
		<echo>完成</echo>
    </target>

    <!-- 打包应用，此处不做签名，在后续的步骤中可以使用商业发布的密钥文件进行签名 -->
    <target name="release">
        <echo>打包APK</echo>
        <exec executable="${apkbuilder}" failonerror="true">
        	<arg value="${bin}\${file_name}_obfs.apk" />
            <!--<arg value="${bin}\unsigned.apk" />-->
            <arg value="-u" />
            <arg value="-z" />
            <arg value="${bin}\rc.ap_" />
            <arg value="-f" />
            <arg value="${dex}" />
            <arg value="-rf" />
            <arg value="${src}" />
            <arg value="-rj" />
            <arg value="${lib}" />
        	<arg value="-nf" />
        	<arg value="${lib}" />
        </exec>
		<delete file="${bin}\rc.ap_" />
        <echo>完成打包</echo>
    </target>

	<!-- 签名 -->
	<target name="sign">
		<echo>开始签名</echo>
		<exec executable="${signer}" failonerror="true">
			<arg value="-verbose"/>
			<arg value="-certs" />
			<arg value="-keystore"/>
			<arg value="${keystore}"/>
			<arg value="-storepass"/>
			<arg value="${key_pass}"/>
			<arg value="-keypass"/>
			<arg value="${key_pass}"/>
			<arg value="-signedjar"/>
			<arg value="${bin}\${file_name}_obfs_signed.apk" /> 
			<arg value="${bin}\${file_name}_obfs.apk" /> 

			<!--<arg value="${bin}\signed.apk"/>
			<arg value="${bin}\unsigned.apk"/>-->
			<arg value="${key_name}"/>
		</exec>
		<delete file="${bin}\${file_name}_obfs.apk" />
		<echo>完成签名</echo>
	</target>

	<!-- 测试签名 -->
    <target name="sign_for_test">
       <echo>开始签名</echo>
		<exec executable="${signer}" failonerror="true">
			<arg value="-verbose"/>
			<arg value="-certs" />
			<arg value="-keystore"/>
			<arg value="${test_keystore}"/>
			<arg value="-storepass"/>
			<arg value="${test_key_pass}"/>
			<arg value="-keypass"/>
			<arg value="${test_key_pass}"/>
			<arg value="-signedjar"/>
			<arg value="${bin}\${file_name}_obfs_signed.apk"/>
			<arg value="${bin}\${file_name}_obfs.apk"/>
			<arg value="${test_key_name}"/>
		</exec>
    	<delete file="${bin}\${file_name}_obfs.apk" />
		<echo>完成签名</echo>
    </target>

    <!-- 对已签名的APK包执行Align优化 -->
    <target name="align">
        <echo>Align优化</echo>
        <exec executable="${align}" failonerror="true">
            <arg value="-v"/>
            <arg value="4"/>
        	
        	<arg value="${bin}\${file_name}_obfs_signed.apk" /> 
        	<arg value="${bin}\${file_name}_obfs_zipaligned.apk" /> 

            <!--<arg value="${bin}\signed.apk"/>
            <arg value="${bin}\signed_aligned.apk"/>-->
        </exec>
    	<delete file="bin/classes.dex" />
    	<delete file="${bin}\${file_name}_obfs_signed.apk" />
		<echo>Align优化结束</echo>
    </target>

	<echo>未混淆的包迁移到result文件夹下</echo>
	<target name="move_to_target">
		<echo>文件移位至result</echo>
		<copy file="${bin}\${file_name}_obfs_zipaligned.apk" tofile="result/tested.apk"/>
	</target>
	
</project>
