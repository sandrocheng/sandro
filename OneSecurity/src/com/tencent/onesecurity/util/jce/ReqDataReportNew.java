// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.4.2 by WSRD Tencent.
// Generated from `/usr/local/resin_system.mqq.com/webapps/communication/taf/upload/p_tonyli/QQDProtocol(7).jce'
// **********************************************************************

package com.tencent.onesecurity.util.jce;

public final class ReqDataReportNew extends com.qq.taf.jce.JceStruct implements java.lang.Cloneable
{
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public String className()
    {
        return "QQD.ReqDataReportNew";
    }

    public String fullClassName()
    {
        return "QQD.ReqDataReportNew";
    }

    public String imei = "";

    public long opdate = 0;

    public java.util.Map<Integer, Integer> features = null;

    public int usertype = 0;

    public String getImei()
    {
        return imei;
    }

    public void  setImei(String imei)
    {
        this.imei = imei;
    }

    public long getOpdate()
    {
        return opdate;
    }

    public void  setOpdate(long opdate)
    {
        this.opdate = opdate;
    }

    public java.util.Map<Integer, Integer> getFeatures()
    {
        return features;
    }

    public void  setFeatures(java.util.Map<Integer, Integer> features)
    {
        this.features = features;
    }

    public int getUsertype()
    {
        return usertype;
    }

    public void  setUsertype(int usertype)
    {
        this.usertype = usertype;
    }

    public ReqDataReportNew()
    {
        setImei(imei);
        setOpdate(opdate);
        setFeatures(features);
        setUsertype(usertype);
    }

    public ReqDataReportNew(String imei, long opdate, java.util.Map<Integer, Integer> features, int usertype)
    {
        setImei(imei);
        setOpdate(opdate);
        setFeatures(features);
        setUsertype(usertype);
    }

    public boolean equals(Object o)
    {
        if(o == null)
        {
            return false;
        }

        ReqDataReportNew t = (ReqDataReportNew) o;
        return (
            com.qq.taf.jce.JceUtil.equals(imei, t.imei) && 
            com.qq.taf.jce.JceUtil.equals(opdate, t.opdate) && 
            com.qq.taf.jce.JceUtil.equals(features, t.features) && 
            com.qq.taf.jce.JceUtil.equals(usertype, t.usertype) );
    }

    public int hashCode()
    {
        try
        {
            throw new Exception("Need define key first!");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        return 0;
    }
    public java.lang.Object clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void writeTo(com.qq.taf.jce.JceOutputStream _os)
    {
        _os.write(imei, 0);
        _os.write(opdate, 1);
        if (null != features)
        {
            _os.write(features, 2);
        }
        _os.write(usertype, 3);
    }

    static java.util.Map<Integer, Integer> cache_features;
    static int cache_usertype;

    @SuppressWarnings("unchecked")
	public void readFrom(com.qq.taf.jce.JceInputStream _is)
    {
        setImei( _is.readString(0, true));

        setOpdate((long) _is.read(opdate, 1, true));

        if(null == cache_features)
        {
            cache_features = new java.util.HashMap<Integer, Integer>();
            Integer __var_12 = 0;
            Integer __var_13 = 0;
            cache_features.put(__var_12, __var_13);
        }
        setFeatures((java.util.Map<Integer, Integer>) _is.read(cache_features, 2, false));

        setUsertype((int) _is.read(usertype, 3, false));

    }

    public void display(java.lang.StringBuilder _os, int _level)
    {
        com.qq.taf.jce.JceDisplayer _ds = new com.qq.taf.jce.JceDisplayer(_os, _level);
        _ds.display(imei, "imei");
        _ds.display(opdate, "opdate");
        _ds.display(features, "features");
        _ds.display(usertype, "usertype");
    }

}

