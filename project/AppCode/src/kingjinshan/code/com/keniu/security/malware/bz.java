package com.keniu.security.malware;

import android.content.Context;
import android.util.Log;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.List;

public final class bz
{
  private static bz f = new bz();
  private static final String[] i = { "/system/sbin/", "/system/xbin/", "/system/bin/" };
  Runnable a = new ca(this);
  private DataOutputStream b = null;
  private DataInputStream c = null;
  private DataInputStream d = null;
  private Process e = null;
  private boolean g = false;
  private Thread h = null;

  public static bz a()
  {
    return f;
  }

  private void a(String paramString, Context paramContext)
  {
    try
    {
      if (this.b != null)
        Log.i("other", paramString);
      try
      {
        StringBuilder localStringBuilder = new StringBuilder();
        Object[] arrayOfObject = new Object[1];
        arrayOfObject[0] = System.getenv("LD_LIBRARY_PATH");
        localStringBuilder.append(String.format("export LD_LIBRARY_PATH=%s\n", arrayOfObject));
        this.b.writeBytes(localStringBuilder.toString().replace("$", "\\$"));
        this.b.flush();
        this.b.writeBytes(paramString + " >" + paramContext.getCacheDir() + "/dumpsys.txt\n");
        this.b.flush();
        this.b.writeBytes("chmod 777 " + paramContext.getCacheDir() + "/dumpsys.txt\n");
        this.b.flush();
        this.b.writeBytes("am broadcast -a com.ijinshan.dumpsysover.broadcast \n");
        this.b.flush();
        return;
      }
      catch (Exception localException)
      {
        while (true)
          localException.printStackTrace();
      }
    }
    finally
    {
    }
  }

  private boolean a(String paramString1, String paramString2, List paramList)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    Object[] arrayOfObject = new Object[1];
    arrayOfObject[0] = System.getenv("LD_LIBRARY_PATH");
    localStringBuilder.append(String.format("export LD_LIBRARY_PATH=%s\n", arrayOfObject));
    localStringBuilder.append(String.format("export CLASSPATH=%s\n", new Object[] { paramString2 }));
    int j = 0;
    if (j < paramList.size())
    {
      localStringBuilder.append("/system/bin/app_process /system/bin com.ijinshan.root.RootInternal  disable ");
      localStringBuilder.append(paramString1 + "/" + (String)paramList.get(j));
      if (j == paramList.size() - 1)
        localStringBuilder.append("\n");
      while (true)
      {
        j++;
        break;
        localStringBuilder.append(";");
      }
    }
    return d(localStringBuilder.toString().replace("$", "\\$"));
  }

  public static boolean b()
  {
    if (e("su") != null);
    for (boolean bool = true; ; bool = false)
      return bool;
  }

  private static boolean b(DataOutputStream paramDataOutputStream, DataInputStream paramDataInputStream)
  {
    boolean bool1;
    if (paramDataOutputStream != null)
      try
      {
        paramDataOutputStream.writeBytes("cd /data/data\n");
        paramDataOutputStream.writeBytes("ls -l\n");
        paramDataOutputStream.flush();
        if (paramDataInputStream == null)
        {
          bool1 = false;
        }
        else
        {
          String str = paramDataInputStream.readLine();
          if ((str != null) && (!str.contains("opendir failed")))
          {
            boolean bool2 = str.contains("Permission denied");
            if (!bool2);
          }
          else
          {
            bool1 = false;
            break label77;
          }
          bool1 = true;
        }
      }
      catch (IOException localIOException)
      {
      }
    else
      bool1 = false;
    label77: return bool1;
  }

  private boolean b(String paramString1, String paramString2, List paramList)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    Object[] arrayOfObject = new Object[1];
    arrayOfObject[0] = System.getenv("LD_LIBRARY_PATH");
    localStringBuilder.append(String.format("export LD_LIBRARY_PATH=%s\n", arrayOfObject));
    localStringBuilder.append(String.format("export CLASSPATH=%s\n", new Object[] { paramString2 }));
    int j = 0;
    if (j < paramList.size())
    {
      localStringBuilder.append("/system/bin/app_process /system/bin com.ijinshan.root.RootInternal  enable ");
      localStringBuilder.append(paramString1 + "/" + (String)paramList.get(j));
      if (j == paramList.size() - 1)
        localStringBuilder.append("\n");
      while (true)
      {
        j++;
        break;
        localStringBuilder.append(";");
      }
    }
    return d(localStringBuilder.toString().replace("$", "\\$"));
  }

  private boolean c(String paramString1, String paramString2)
  {
    StringBuilder localStringBuilder = new StringBuilder(f("cat"));
    localStringBuilder.append(" ");
    localStringBuilder.append(paramString1);
    localStringBuilder.append(" > ");
    localStringBuilder.append(paramString2);
    localStringBuilder.append("\n");
    return d(localStringBuilder.toString());
  }

  private boolean d(String paramString1, String paramString2)
  {
    StringBuilder localStringBuilder = new StringBuilder(f("cp"));
    localStringBuilder.append(" ");
    localStringBuilder.append("-r");
    localStringBuilder.append(" ");
    localStringBuilder.append(paramString1);
    localStringBuilder.append(" ");
    localStringBuilder.append(paramString2);
    localStringBuilder.append("\n");
    return d(localStringBuilder.toString());
  }

  private static String e(String paramString)
  {
    if (paramString.indexOf('/') != -1);
    label84: for (Object localObject = paramString; ; localObject = null)
    {
      return localObject;
      int j = 0;
      while (true)
        while (true)
        {
          if (j >= i.length)
            break label84;
          try
          {
            String str = i[j] + paramString;
            boolean bool = new File(str).exists();
            if (bool)
              localObject = str;
          }
          catch (Exception localException)
          {
            localException.printStackTrace();
            j++;
          }
        }
    }
  }

  private boolean e(String paramString1, String paramString2)
  {
    if (paramString1 == null);
    StringBuilder localStringBuilder;
    for (boolean bool = false; ; bool = d(localStringBuilder.toString()))
    {
      return bool;
      localStringBuilder = new StringBuilder(f("mount"));
      localStringBuilder.append(" -o remount,ro ");
      localStringBuilder.append(paramString1);
      localStringBuilder.append(" ");
      localStringBuilder.append(paramString2 + "\n");
    }
  }

  private static String f(String paramString)
  {
    String str1 = e(paramString);
    if (str1 == null)
    {
      str1 = e("busybox");
      if (str1 != null)
      {
        String str2 = str1 + " ";
        str1 = str2 + paramString;
      }
    }
    if (str1 == null)
      str1 = paramString;
    return str1;
  }

  // ERROR //
  private static String h()
  {
    // Byte code:
    //   0: ldc 219
    //   2: invokestatic 196	com/keniu/security/malware/bz:f	(Ljava/lang/String;)Ljava/lang/String;
    //   5: astore 7
    //   7: invokestatic 229	java/lang/Runtime:getRuntime	()Ljava/lang/Runtime;
    //   10: aload 7
    //   12: invokevirtual 233	java/lang/Runtime:exec	(Ljava/lang/String;)Ljava/lang/Process;
    //   15: astore 8
    //   17: new 177	java/io/DataInputStream
    //   20: dup
    //   21: aload 8
    //   23: invokevirtual 239	java/lang/Process:getInputStream	()Ljava/io/InputStream;
    //   26: invokespecial 242	java/io/DataInputStream:<init>	(Ljava/io/InputStream;)V
    //   29: astore 9
    //   31: aload 8
    //   33: invokevirtual 245	java/lang/Process:waitFor	()I
    //   36: pop
    //   37: aconst_null
    //   38: astore 12
    //   40: aload 9
    //   42: invokevirtual 180	java/io/DataInputStream:readLine	()Ljava/lang/String;
    //   45: astore 14
    //   47: aload 14
    //   49: ifnull +136 -> 185
    //   52: aload 14
    //   54: ldc 247
    //   56: invokevirtual 250	java/lang/String:startsWith	(Ljava/lang/String;)Z
    //   59: ifeq +38 -> 97
    //   62: aload 14
    //   64: ldc 252
    //   66: invokevirtual 186	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   69: ifeq +28 -> 97
    //   72: aload 14
    //   74: bipush 32
    //   76: invokevirtual 211	java/lang/String:indexOf	(I)I
    //   79: istore 18
    //   81: iload 18
    //   83: iconst_m1
    //   84: if_icmpeq +13 -> 97
    //   87: aload 14
    //   89: iconst_0
    //   90: iload 18
    //   92: invokevirtual 256	java/lang/String:substring	(II)Ljava/lang/String;
    //   95: astore 12
    //   97: aload 14
    //   99: ldc_w 258
    //   102: invokevirtual 250	java/lang/String:startsWith	(Ljava/lang/String;)Z
    //   105: ifeq -65 -> 40
    //   108: aload 14
    //   110: ldc 252
    //   112: invokevirtual 186	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   115: ifeq -75 -> 40
    //   118: aload 14
    //   120: bipush 32
    //   122: invokevirtual 211	java/lang/String:indexOf	(I)I
    //   125: istore 15
    //   127: iload 15
    //   129: iconst_m1
    //   130: if_icmpeq +55 -> 185
    //   133: aload 14
    //   135: iconst_0
    //   136: iload 15
    //   138: invokevirtual 256	java/lang/String:substring	(II)Ljava/lang/String;
    //   141: astore 16
    //   143: aload 12
    //   145: astore 17
    //   147: aload 9
    //   149: astore_2
    //   150: aload 16
    //   152: astore 5
    //   154: aload 8
    //   156: astore_3
    //   157: aload 17
    //   159: astore 4
    //   161: aload_2
    //   162: ifnull +7 -> 169
    //   165: aload_2
    //   166: invokevirtual 261	java/io/DataInputStream:close	()V
    //   169: aload_3
    //   170: ifnull +7 -> 177
    //   173: aload_3
    //   174: invokevirtual 264	java/lang/Process:destroy	()V
    //   177: aload 5
    //   179: ifnonnull +52 -> 231
    //   182: aload 4
    //   184: areturn
    //   185: aload 8
    //   187: astore_3
    //   188: aload 12
    //   190: astore 4
    //   192: aload 9
    //   194: astore_2
    //   195: aconst_null
    //   196: astore 5
    //   198: goto -37 -> 161
    //   201: astore_0
    //   202: aconst_null
    //   203: astore_1
    //   204: aconst_null
    //   205: astore_2
    //   206: aconst_null
    //   207: astore_3
    //   208: aload_0
    //   209: invokevirtual 135	java/lang/Exception:printStackTrace	()V
    //   212: aload_1
    //   213: astore 4
    //   215: aconst_null
    //   216: astore 5
    //   218: goto -57 -> 161
    //   221: astore 6
    //   223: aload 6
    //   225: invokevirtual 265	java/io/IOException:printStackTrace	()V
    //   228: goto -59 -> 169
    //   231: aload 5
    //   233: astore 4
    //   235: goto -53 -> 182
    //   238: astore 19
    //   240: aload 8
    //   242: astore_3
    //   243: aload 19
    //   245: astore_0
    //   246: aconst_null
    //   247: astore_1
    //   248: aconst_null
    //   249: astore_2
    //   250: goto -42 -> 208
    //   253: astore 10
    //   255: aload 8
    //   257: astore_3
    //   258: aload 10
    //   260: astore_0
    //   261: aload 9
    //   263: astore_2
    //   264: aconst_null
    //   265: astore_1
    //   266: goto -58 -> 208
    //   269: astore 13
    //   271: aload 8
    //   273: astore_3
    //   274: aload 13
    //   276: astore_0
    //   277: aload 12
    //   279: astore_1
    //   280: aload 9
    //   282: astore_2
    //   283: goto -75 -> 208
    //
    // Exception table:
    //   from	to	target	type
    //   0	17	201	java/lang/Exception
    //   165	169	221	java/io/IOException
    //   17	31	238	java/lang/Exception
    //   31	37	253	java/lang/Exception
    //   40	143	269	java/lang/Exception
  }

  public final void a(Context paramContext)
  {
    StringBuilder localStringBuilder = new StringBuilder(f("dumpsys"));
    localStringBuilder.append(" ");
    localStringBuilder.append("notification");
    a(localStringBuilder.toString(), paramContext);
  }

  public final boolean a(String paramString)
  {
    String str = f("pm");
    StringBuilder localStringBuilder = new StringBuilder();
    Object[] arrayOfObject = new Object[1];
    arrayOfObject[0] = System.getenv("LD_LIBRARY_PATH");
    localStringBuilder.append(String.format("export LD_LIBRARY_PATH=%s\n", arrayOfObject));
    localStringBuilder.append(str);
    localStringBuilder.append(" uninstall ");
    localStringBuilder.append(paramString);
    localStringBuilder.append("\n");
    return d(localStringBuilder.toString().replace("$", "\\$"));
  }

  public final boolean a(String paramString1, String paramString2)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    Object[] arrayOfObject = new Object[1];
    arrayOfObject[0] = System.getenv("LD_LIBRARY_PATH");
    localStringBuilder.append(String.format("export LD_LIBRARY_PATH=%s\n", arrayOfObject));
    localStringBuilder.append(String.format("export CLASSPATH=%s\n", new Object[] { paramString2 }));
    localStringBuilder.append("/system/bin/app_process /system/bin com.ijinshan.root.RootInternal  kill ");
    localStringBuilder.append(paramString1);
    localStringBuilder.append("\n");
    return d(localStringBuilder.toString().replace("$", "\\$"));
  }

  public final boolean a(String paramString, List paramList)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    Object[] arrayOfObject = new Object[1];
    arrayOfObject[0] = System.getenv("LD_LIBRARY_PATH");
    localStringBuilder.append(String.format("export LD_LIBRARY_PATH=%s\n", arrayOfObject));
    String str = f("pm");
    int j = 0;
    if (j < paramList.size())
    {
      localStringBuilder.append(str);
      localStringBuilder.append(" disable ");
      localStringBuilder.append(paramString + "/" + (String)paramList.get(j));
      if (j == paramList.size() - 1)
        localStringBuilder.append("\n");
      while (true)
      {
        j++;
        break;
        localStringBuilder.append(";");
      }
    }
    return d(localStringBuilder.toString().replace("$", "\\$"));
  }

  public final boolean b(String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder(f("rm"));
    localStringBuilder.append(" ");
    localStringBuilder.append(paramString);
    localStringBuilder.append("\n");
    return d(localStringBuilder.toString());
  }

  public final boolean b(String paramString1, String paramString2)
  {
    if (paramString1 == null);
    StringBuilder localStringBuilder;
    for (boolean bool = false; ; bool = d(localStringBuilder.toString()))
    {
      return bool;
      localStringBuilder = new StringBuilder(f("mount"));
      localStringBuilder.append(" -o remount,rw ");
      localStringBuilder.append(paramString1);
      localStringBuilder.append(" ");
      localStringBuilder.append(paramString2 + "\n");
    }
  }

  public final boolean b(String paramString, List paramList)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    Object[] arrayOfObject = new Object[1];
    arrayOfObject[0] = System.getenv("LD_LIBRARY_PATH");
    localStringBuilder.append(String.format("export LD_LIBRARY_PATH=%s\n", arrayOfObject));
    String str = f("pm");
    int j = 0;
    if (j < paramList.size())
    {
      localStringBuilder.append(str);
      localStringBuilder.append(" enable ");
      localStringBuilder.append(paramString + "/" + (String)paramList.get(j));
      if (j == paramList.size() - 1)
        localStringBuilder.append("\n");
      while (true)
      {
        j++;
        break;
        localStringBuilder.append(";");
      }
    }
    return d(localStringBuilder.toString().replace("$", "\\$"));
  }

  public final void c()
  {
    try
    {
      if (this.h == null)
      {
        this.h = new Thread(this.a);
        this.h.start();
      }
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }

  public final boolean c(String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder(f("rm"));
    localStringBuilder.append(" -r ");
    localStringBuilder.append(paramString);
    localStringBuilder.append("\n");
    return d(localStringBuilder.toString());
  }

  public final void d()
  {
    if (this.b != null);
    try
    {
      this.b.close();
      this.b = null;
      if (this.c == null);
    }
    catch (IOException localIOException2)
    {
      try
      {
        this.c.close();
        this.c = null;
        if (this.e != null)
        {
          this.e.destroy();
          this.e = null;
        }
        return;
        localIOException2 = localIOException2;
        localIOException2.printStackTrace();
      }
      catch (IOException localIOException1)
      {
        while (true)
          localIOException1.printStackTrace();
      }
    }
  }

  public final boolean d(String paramString)
  {
    try
    {
      DataOutputStream localDataOutputStream = this.b;
      boolean bool = false;
      if (localDataOutputStream != null);
      try
      {
        this.b.writeBytes(paramString);
        this.b.flush();
        bool = true;
        return bool;
      }
      catch (IOException localIOException)
      {
        while (true)
        {
          localIOException.printStackTrace();
          bool = false;
        }
      }
    }
    finally
    {
    }
  }

  public final boolean e()
  {
    if ((this.e != null) && (this.b != null));
    for (boolean bool = true; ; bool = false)
      return bool;
  }

  public final boolean f()
  {
    String str = h();
    if (str == null);
    StringBuilder localStringBuilder;
    for (boolean bool = false; ; bool = d(localStringBuilder.toString()))
    {
      return bool;
      localStringBuilder = new StringBuilder(f("mount"));
      localStringBuilder.append(" -o remount,rw ");
      localStringBuilder.append(str);
      localStringBuilder.append(" /system\n");
    }
  }

  public final boolean g()
  {
    String str = h();
    if (str == null);
    StringBuilder localStringBuilder;
    for (boolean bool = false; ; bool = d(localStringBuilder.toString()))
    {
      return bool;
      localStringBuilder = new StringBuilder(f("mount"));
      localStringBuilder.append(" -o remount,ro ");
      localStringBuilder.append(str);
      localStringBuilder.append(" /system\n");
    }
  }
}

/* Location:           C:\Users\sandrocheng.21KUNPENG\Desktop\classes_dex2jar\
 * Qualified Name:     com.keniu.security.malware.bz
 * JD-Core Version:    0.6.2
 */